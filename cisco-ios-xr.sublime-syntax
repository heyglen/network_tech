%YAML 1.2
---

# Copyright 2018 Glen Harmon

name: Cisco IOS XR
file_extensions:
  - cisco-ios-xr
  - ios-xr
first_line_match: |
  (?xi)
    \s*
    [#!]
    .*
    (?:
      (?:ios-xr)
    )
scope: text.network.cisco.ios_xr text.network.cisco.configure_terminal


variables:
  comment: '(?:[!#])'
  pop_ctx: '^\s*exit\s*$'
  command_end: '(?:\s|{{comment}}|$)'
  line_number: '^\s*\d+'
  security_tag_id: '\d+'
  isis_identifier: '\S{1,40}'
  ospf_identifier: '\S{1,40}'
  eigrp_virtual_instance_name: |
    (?xi)
    (?:
      (?:
        (?:[a-z])|
        (?:[-@.#:_])
      ){1,32}
    )
  bgp_community: |
    (?xi)
    (?:
      (?:{{number_16_bit_wo_zero}}:{{number_16_bit_wo_zero}})
    )
  bgp_well_known_community_names: |
    (?xi)
    (?:
      (?:accept-own)|
      (?:internet)|
      (?:no-export)|
      (?:no-advertise)|
      (?:local-as)
    )
  bgp_community_glob: |
    (?xi)
    (?:
      (?:accept-own)|
      (?:internet)|
      (?:no-export)|
      (?:no-advertise)|
      (?:local-as)|
      (?:
        (?:
          (?:{{number_16_bit_wo_zero}})|
          (?:\*)
        )
        :
        (?:
          (?:{{number_16_bit_wo_zero}})|
          (?:\*)
        )
      )
    )
  # bgp_extended_community: |
  #   (?xi)
  #   (?:
  #     (?# Type)
  #     (?:{{number_16_bit_wo_zero}})
  #   )
  vrf_name: |
    (?xi)
    [\w-]+
  route_target: |
    (?xi)
    (?:
      (?:{{number_32_bit}}:{{number_16_bit_wo_zero}})|
      (?:{{number_16_bit_wo_zero}}:{{number_32_bit}})|
      (?:{{ip_prefix}}:{{number_16_bit_wo_zero}})|
      (?:{{ip}}:{{number_16_bit_wo_zero}})|
      (?:{{number_16_bit_wo_zero}}\.{{number_16_bit_wo_zero}}:{{number_16_bit_wo_zero}})
    )
  route_distinguisher: |
    (?xi)
    (?:
      (?:
        (?:
          (?:{{number_32_bit_wo_zero}})|
          (?:(?:{{number_16_bit_wo_zero}})\.(?:{{number_16_bit}}))
        )
        :
        (?:{{number_32_bit}})
      )|
      (?:
        (?:{{ip}}):(?:{{number_16_bit}})
      )
    )
  ios_regex_special_characters: |
    (?xi)
    (?:
      (?:\.)|
      (?:_)|
      (?:\^)|
      (?:\$)|
      (?:\?)|
      (?:\*)|
      (?:\+)|
      (?:\()|
      (?:\))|
      (?:\|)|
      (?:\\)
    )
  route_target_glob: |
    (?xi)
    (?:
      (?:{{number_32_bit}}:{{number_16_bit_wo_zero}})|
      (?:{{number_32_bit}}:\*)|
      (?:{{number_16_bit_wo_zero}}:{{number_32_bit}})|
      (?:{{number_16_bit_wo_zero}}:\*)|
      (?:{{ip_prefix}}:{{number_16_bit_wo_zero}})|
      (?:{{ip_prefix}}:\*)|
      (?:{{ip}}:{{number_16_bit_wo_zero}})|
      (?:{{ip}}:\*)|
      (?:{{number_16_bit_wo_zero}}\.{{number_16_bit_wo_zero}}:{{number_16_bit_wo_zero}})|
      (?:{{number_16_bit_wo_zero}}\.{{number_16_bit_wo_zero}}:\*)
    )
  administrative_distance: '{{number_8_bit}}'
  bgp_local_preference: '{{number_32_bit}}'
  bgp_med: '{{number_32_bit}}'
  ospf_metric: '{{number_24_bit}}'
  aigp_metric: '{{number_32_bit}}'
  rpl_parameter_name: |
    (?xi)
    (?:
      [0-9a-z_-]{1,63}
    )
  rpl_parameter: |
    (?xi)
    (?:
      \$
      (?:
        [0-9a-z_-]{1,63}
      )
    )
  rpl_regex: |
    (?xi)
    (?:
      (?:
        (?:
          (?:ios)|
          (?:dfa)
        )
        -regex\s+'[^']*'
      )
    )
  rpl_inline_statement: |
    (?xi)
    (?:
      (?:{{rpl_regex}})|
      (?:{{rpl_parameter}})|
      (?:{{ip_prefix}}\s+{{operators}}\s+{{ipv4_prefix_length}})|
      (?:{{ipv6_prefix}}(?:\s+{{operators}}\s+{{ipv6_prefix_length}})?)|
      (?:\S+)
    )
  rpl_set_name: '[\w\-]{1,63}'
  rpl_keywords: |
    (?xi)
    (?:
      (?:pass)|
      (?:drop)
    )
  rpl_set_operators: |
    (?xi)
    (?:
      \b
      (?:
        (?:in)|
        (?:eq)|
        (?:matches-any)
      )
      \b
    )
  rpl_globals: |
    (?xi)
    (?:
      \b
      (?:
        (?:destination)|
        (?:as-path)|
        (?:community)|
        (?:med)
      )
      \b
    )
  type_5_password: \S+
  type_7_password: \S+
  ah_transform: |
    (?xi)
    (?:
      (?:ah-md5-hmac)|
      (?:ah-sha-hmac)
    )
  # 1 - 255
  number_8_bit: |
    (?xi)
    (?:
      \b
      (?:
        (?:25[0-5])|
        (?:2[0-4]\d)|
        (?:[0-1]?\d{1,2})
      )
      \b
    )
  number_range_1_1024: |
    (?xi)
    (?:
      \b
      (?:
        (?:102[0-4])|
        (?:10[0-1]\d)|
        (?:\d{2,3})|
        (?:[1-9])
      )
      \b
    )
  number_range_1_65534: |
    (?xi)
    (?:
      \b
      (?:
        (?:6553[0-4])|
        (?:655[0-2]\d)|
        (?:65[0-4]\d{2})|
        (?:6[0-4]\d{3})|
        (?:[0-5]\d{4})|
        (?:\d{2,4})|
        (?:[1-9])
      )
      \b
    )
  number_range_1_100: |
    (?xi)
    (?:
      \b
      (?:
        (?:100)|
        (?:\d{2})|
        (?:[1-9])
      )
      \b
    )
  number_range_1_1440: |
    (?xi)
    (?:
      \b
      (?:
        (?:1440)|
        (?:14[0-3]\d)|
        (?:1[0-3]\d{2})|
        (?:\d{2,3})|
        (?:[1-9])
      )
      \b
    )
  number_range_0_4095: |
    (?xi)
    (?:
      \b
      (?:
        (?:409[0-5])|
        (?:40[0-8]\d)|
        (?:[0-3]\d{3})|
        (?:\d{1,3})
      )
      \b
    )
  number_range_0_3600: |
    (?xi)
    (?:
      \b
      (?:
        (?:3600)|
        (?:3[0-5]\d{2})|
        (?:[0-2]\d{3})|
        (?:\d{1,3})
      )
      \b
    )
  number_range_0_600000: |
    (?xi)
    (?:
      \b
      (?:
        (?:600000)|
        (?:[0-5]\d{5})|
        (?:\d{1,5})
      )
      \b
    )
  number_range_1_600000: |
    (?xi)
    (?:
      \b
      (?:
        (?:600000)|
        (?:[0-5]\d{5})|
        (?:\d{2,5})|
        (?:[1-9])
      )
      \b
    )
  number_range_100_3000: |
    (?xi)
    (?:
      \b
      (?:
        (?:3000)|
        (?:[0-2]\d{3})|
        (?:1\d{2})
      )
      \b
    )
  number_range_1_4294967: |
    (?xi)
    (?:
      \b
      (?:
        (?:429496[0-7])|
        (?:42949[0-5]\d)|
        (?:4294[0-8]\d{2})|
        (?:429[0-3]\d{3})|
        (?:42[0-8]\d{4})|
        (?:4[0-1]\d{5})|
        (?:[0-3]\d{6})|
        (?:1\d{2,7})|
        (?:[1-9])
      )
      \b
    )
  # 0 - 2047
  number_11_bit: |
    (?xi)
    (?:
      \b
      (?:
        (?:204[0-7])|
        (?:20[0-3]\d)|
        (?:[0-1]?\d{1,3})
      )
      \b
    )
  # 1 - 65535
  number_16_bit_wo_zero: |
    (?xi)
    (?:
      \b
      (?:
        (?:6553[0-5])|
        (?:655[0-2]\d)|
        (?:65[0-4]\d{2})|
        (?:6[0-4]\d{3})|
        (?:[0-5]\d{4})|
        (?:\d{2,4})|
        (?:[1-9])
      )
      \b
    )
  # 0 - 65535
  number_16_bit: |
    (?xi)
    (?:
      \b
      (?:
        (?:6553[0-5])|
        (?:655[0-2]\d)|
        (?:65[0-4]\d{2})|
        (?:6[0-4]\d{3})|
        (?:[0-5]\d{4})|
        (?:\d{1,4})
      )
      \b
    )
  # 0 - 1048575
  number_20_bit: |
    (?xi)
    (?:
      \b
      (?:
        (?:104857[0-5])|
        (?:10485[0-6]\d)|
        (?:1048[0-4]\d{2})|
        (?:104[0-7]\d{3})|
        (?:10[0-3]\d{4})|
        (?:\d{0,6}[1-9])
      )
      \b
    )
  # 0 - 16777215
  number_24_bit: |
    (?xi)
    (?:
      \b
      (?:
        (?:1677721[0-5])|
        (?:1677720\d)|
        (?:16777[0-1]\d{2})|
        (?:1677[0-6]\d{3})|
        (?:167[0-6]\d{4})|
        (?:16[0-6]\d{5})|
        (?:1[0-5]\d{6})|
        (?:\d{1,7})
      )
      \b
    )
  # 1 - 16777214
  number_24_bit_1_to_16777214: |
    (?xi)
    (?:
      \b
      (?:
        (?:1677721[0-4])|
        (?:1677720\d)|
        (?:16777[0-1]\d{2})|
        (?:1677[0-6]\d{3})|
        (?:167[0-6]\d{4})|
        (?:16[0-6]\d{5})|
        (?:1[0-5]\d{6})|
        (?:\d{2,7})|
        (?:[1-9])
      )
      \b
    )
  # 0 - 4294967295
  number_32_bit: |
    (?xi)
    (?:
      \b
      (?:
        (?:4294967295)|
        (?:[0-3]\d{9})|
        (?:4[0-1]\d{8})|
        (?:42[0-8]\d{7})|
        (?:429[0-3]\d{6})|
        (?:4294[0-8]\d{5})|
        (?:42949[0-5]\d{4})|
        (?:429496[0-6]\d{3})|
        (?:4294967[0-1]\d{2})|
        (?:42949672[0-8]\d{1})|
        (?:429496729[0-5])|
        (?:\d{1,9})
      )
      \b
    )
  # 1 - 4294967295
  number_32_bit_wo_zero: |
    (?xi)
    (?:
      \b
      (?:
        (?:4294967295)|
        (?:[0-3]\d{9})|
        (?:4[0-1]\d{8})|
        (?:42[0-8]\d{7})|
        (?:429[0-3]\d{6})|
        (?:4294[0-8]\d{5})|
        (?:42949[0-5]\d{4})|
        (?:429496[0-6]\d{3})|
        (?:4294967[0-1]\d{2})|
        (?:42949672[0-8]\d{1})|
        (?:429496729[0-5])|
        (?:\d{2,9})|
        (?:[1-9])
      )
      \b
    )
  # 0 - 18,446,744,073,709,551,615
  number_64_bit: |
    (?xi)
    (?:
      \b
      (?:
        (?:18446744073709551615)|
        (?:[0-1]\d{19})|
        (?:1[0-7]\d{18})|
        (?:18[0-3]\d{17})|
        (?:184[0-3]\d{16})|
        (?:1844[0-5]\d{15})|
        (?:18446[0-6]\d{14})|
        (?:184467[0-3]\d{13})|
        (?:1844674[0-3]\d{12})|
        (?:184467440\d{11})|
        (?:184467440[0-6]\d{10})|
        (?:1844674407[0-2]\d{9})|
        (?:18446744073[0-6]\d{8})|
        (?:1844674407370\d{7})|
        (?:1844674407370[0-8]\d{6})|
        (?:18446744073709[0-4]\d{5})|
        (?:184467440737095[0-4]\d{4})|
        (?:18446744073709550\d{3})|
        (?:18446744073709551[0-5]\d{2})|
        (?:1844674407370955160[0-5])|
        (?:\d{1,19})
      )
      \b
    )
  autonomous_system: |
    (?xi)
    (?:
      (?:{{number_16_bit_wo_zero}}\.{{number_16_bit}})|
      (?:{{number_32_bit_wo_zero}})
    )
  mpls_te_path_priority: |
    (?xi)
    (?:
      (?:1000)|
      (?:\d{2,3})|
      (?:[1-9])
    )
  mpls_te_path_id: |
    (?xi)
    (?:
      (?:1000)|
      (?:\d{2,3})|
      (?:[1-9])
    )
  tos: |
    (?xi)
    (?:
      (?:[0-1]?\d)|
      (?:max-reliability)|
      (?:max-throughput)|
      (?:min-delay)|
      (?:min-monetary-cost)|
      (?:normal)
    )
  mac_address: |
    (?xi)
    (?:
      (?:[a-f0-9]{4}\.){2}[a-f0-9]{4}
    )
  mtu: |
    (?xi)
    (?:
      \b
      (?:
        (?:6553[0-5])|
        (?:655[0-2]\d)|
        (?:65[0-4]\d{2})|
        (?:6[0-4]\d{3})|
        (?:[0-5]\d{4})|
        (?:\d{3,4})|
        (?:[7-9]\d)|
        (?:6[0-4])
      )
      \b
    )

  tos_precedence: |
    (?xi)
    (?:
      (?:[0-7])|
      (?:flash-override)|
      (?:flash)|
      (?:immediate)|
      (?:internet)|
      (?:network)|
      (?:priority)|
      (?:routine)
    )
  dscp_w_value: |
    (?xi)
    (?:
      (?:{{dscp}})|
      (?:6[0-3])|
      (?:[0-5]?\d)
    )
  dscp: |
    (?xi)
    (?:
      (?:AF11)|
      (?:AF12)|
      (?:AF13)|
      (?:AF21)|
      (?:AF22)|
      (?:AF23)|
      (?:AF31)|
      (?:AF32)|
      (?:AF33)|
      (?:AF41)|
      (?:AF42)|
      (?:AF43)|
      (?:CS1)|
      (?:CS2)|
      (?:CS3)|
      (?:CS4)|
      (?:CS5)|
      (?:CS6)|
      (?:CS7)|
      (?:EF)
    )
  month_names: |
    (?xi)
    (?:
      (?:jan(?:uary)?)|
      (?:feb(?:ruary)?)|
      (?:mar(?:ch)?)|
      (?:apr(?:il)?)|
      (?:may)|
      (?:jun(?:e)?)|
      (?:july)|
      (?:aug(?:ust)?)|
      (?:sept(?:ember)?)|
      (?:oct(?:ober)?)|
      (?:nov(?:ember)?)|
      (?:dec(?:ember)?)
    )
  military_clock_hour_minute: |
    (?xi)
    (?:
      (?:
        (?:
          2[0-3]
        )|
        (?:
          [0-1]?\d+
        )
      )?
    )
    :
    [0-5]\d+
  year: |
    (?xi)
    (?:\d{4})
  minutes: |
    (?xi)
    (?:[0-5]?\d)
  time_24_hour: |
    (?xi)
    (?:
      (?:
        (?:2[0-3])|
        (?:[0-1]?\d)
      )(?::)(?:[0-5]?\d)
    )
  day_of_month: |
    (?xi)
    (?:
      (?:3[0-2])|
      (?:[1-2]?\d)
    )

  day_of_week_names: |
    (?xi)
    (?:
      (?:mon(?:day)?)|
      (?:tues(?:day)?)|
      (?:wed(?:nesday)?)|
      (?:thurs(?:day)?)|
      (?:fri(?:day)?)|
      (?:sat(?:urday)?)|
      (?:sun(?:day)?)
    )
  utc_offset_hour: |
    (?xi)
    [-+]?
    (?:
      (?:1[0-4])|
      (?:[0-9])
    )
  utc_offset_minute: '[1-6]?[0-9]'
  # Source: https://en.wikipedia.org/wiki/List_of_time_zone_abbreviations
  # Single Letter Timezones: https://www.cisco.com/c/en/us/td/docs/ios/12_2/configfun/command/reference/ffun_r/frf012.html#wpxref70983
  timezones: |
    (?xi)
    (?:
      (?:ACDT)|
      (?:ACST)|
      (?:ACT)|
      (?:ACT)|
      (?:ACWST)|
      (?:ADT)|
      (?:AEDT)|
      (?:AEST)|
      (?:AFT)|
      (?:AKDT)|
      (?:AKST)|
      (?:AMST)|
      (?:AMT)|
      (?:AMT)|
      (?:ART)|
      (?:AST)|
      (?:AST)|
      (?:AWST)|
      (?:AZOST)|
      (?:AZOT)|
      (?:AZT)|
      (?:BDT)|
      (?:BIOT)|
      (?:BIT)|
      (?:BOT)|
      (?:BRST)|
      (?:BRT)|
      (?:BST)|
      (?:BST)|
      (?:BST)|
      (?:BTT)|
      (?:CAT)|
      (?:CCT)|
      (?:CDT)|
      (?:CDT)|
      (?:CEST)|
      (?:CET)|
      (?:CHADT)|
      (?:CHAST)|
      (?:CHOT)|
      (?:CHOST)|
      (?:CHST)|
      (?:CHUT)|
      (?:CIST)|
      (?:CIT)|
      (?:CKT)|
      (?:CLST)|
      (?:CLT)|
      (?:COST)|
      (?:COT)|
      (?:CST)|
      (?:CST)|
      (?:CST)|
      (?:CT)|
      (?:CVT)|
      (?:CWST)|
      (?:CXT)|
      (?:DAVT)|
      (?:DDUT)|
      (?:DFT)|
      (?:EASST)|
      (?:EAST)|
      (?:EAT)|
      (?:ECT)|
      (?:ECT)|
      (?:EDT)|
      (?:EEST)|
      (?:EET)|
      (?:EGST)|
      (?:EGT)|
      (?:EIT)|
      (?:EST)|
      (?:FET)|
      (?:FJT)|
      (?:FKST)|
      (?:FKT)|
      (?:FNT)|
      (?:GALT)|
      (?:GAMT)|
      (?:GET)|
      (?:GFT)|
      (?:GILT)|
      (?:GIT)|
      (?:GMT)|
      (?:GST)|
      (?:GST)|
      (?:GYT)|
      (?:HDT)|
      (?:HAEC)|
      (?:HST)|
      (?:HKT)|
      (?:HMT)|
      (?:HOVST)|
      (?:HOVT)|
      (?:ICT)|
      (?:IDLW)|
      (?:IDT)|
      (?:IOT)|
      (?:IRDT)|
      (?:IRKT)|
      (?:IRST)|
      (?:IST)|
      (?:IST)|
      (?:IST)|
      (?:JST)|
      (?:KALT)|
      (?:KGT)|
      (?:KOST)|
      (?:KRAT)|
      (?:KST)|
      (?:LHST)|
      (?:LHST)|
      (?:LINT)|
      (?:MAGT)|
      (?:MART)|
      (?:MAWT)|
      (?:MDT)|
      (?:MET)|
      (?:MEST)|
      (?:MHT)|
      (?:MIST)|
      (?:MIT)|
      (?:MMT)|
      (?:MSK)|
      (?:MST)|
      (?:MST)|
      (?:MUT)|
      (?:MVT)|
      (?:MYT)|
      (?:NCT)|
      (?:NDT)|
      (?:NFT)|
      (?:NPT)|
      (?:NST)|
      (?:NT)|
      (?:NUT)|
      (?:NZDT)|
      (?:NZST)|
      (?:OMST)|
      (?:ORAT)|
      (?:PDT)|
      (?:PET)|
      (?:PETT)|
      (?:PGT)|
      (?:PHOT)|
      (?:PHT)|
      (?:PKT)|
      (?:PMDT)|
      (?:PMST)|
      (?:PONT)|
      (?:PST)|
      (?:PST)|
      (?:PYST)|
      (?:PYT)|
      (?:RET)|
      (?:ROTT)|
      (?:SAKT)|
      (?:SAMT)|
      (?:SAST)|
      (?:SBT)|
      (?:SCT)|
      (?:SDT)|
      (?:SGT)|
      (?:SLST)|
      (?:SRET)|
      (?:SRT)|
      (?:SST)|
      (?:SST)|
      (?:SYOT)|
      (?:TAHT)|
      (?:THA)|
      (?:TFT)|
      (?:TJT)|
      (?:TKT)|
      (?:TLT)|
      (?:TMT)|
      (?:TRT)|
      (?:TOT)|
      (?:TVT)|
      (?:ULAST)|
      (?:ULAT)|
      (?:UTC)|
      (?:UYST)|
      (?:UYT)|
      (?:UZT)|
      (?:VET)|
      (?:VLAT)|
      (?:VOLT)|
      (?:VOST)|
      (?:VUT)|
      (?:WAKT)|
      (?:WAST)|
      (?:WAT)|
      (?:WEST)|
      (?:WET)|
      (?:WIT)|
      (?:WST)|
      (?:YAKT)|
      (?:YEKT)|
      (?:Y)|
      (?:X)|
      (?:W)|
      (?:V)|
      (?:U)|
      (?:T)|
      (?:S)|
      (?:R)|
      (?:Q)|
      (?:P)|
      (?:O)|
      (?:N)|
      (?:Z)|
      (?:A)|
      (?:B)|
      (?:C)|
      (?:D)|
      (?:E)|
      (?:F)|
      (?:G)|
      (?:H)|
      (?:I)|
      (?:K)|
      (?:L)|
      (?:M)|
      (?:\S+)
    )
  hashing_algorithms: |
    (?xi)
    (?:
      (?:md5)
    )
  ctx_pop_configure_terminal: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:alias)|
        (?:cdp)|
        (?:clear)|
        (?:control-plane)|
        (?:class-map)|
        (?:policy-map)|
        (?:domain)|
        (?:flow\s+exporter-map)|
        (?:sampler-map)|
        (?:end-policy)|
        (?:object-group)|
        (?:ipv(?:(?:4)|(?:6))\s+access-list)|
        (?:end-set)|
        (?:extcommunity-set)|
        (?:hostname)|
        (?:interface)|
        (?:lacp)|
        (?:line)|
        (?:l2vpn)|
        (?:mpls\s+traffic-eng\s*$)|
        (?:mpls\s+ldp\s*$)|
        (?:object-group)|
        (?:prefix-set)|
        (?:route-policy\s+\S+(?:\s+\(.*\))?\s*$)|
        (?:router)|
        (?:rsvp)|
        (?:ssh)|
        (?:username)|
        (?:usergroup)|
        (?:taskgroup)|
        (?:vrf)
      )
    )
  ctx_pop_interface: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:cdp)|
        (?:ipv4)|
        (?:ipv6)|
        (?:bundle)|
        (?:flow)|
        (?:load-interval)|
        (?:path-option)|
        (?:destination)|
        (?:signalled-bandwidth)|
        (?:vrf)|
        (?:enable)|
        (?:shutdown)|
        (?:encapsulation)|
        (?:address-family)|
        (?:csnp-interval)|
        (?:circuit-type)|
        (?:mtu)|
        (?:bandwidth)|
        (?:host-routing)|
        (?:lacp)|
        (?:{{ctx_pop_configure_terminal}})
      )
    )
  ctx_pop_interface_lldp: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:receive)|
        (?:transmit)|
        (?:destination)|
        (?:{{ctx_pop_interface}})
      )
    )
  ctx_pop_mpls_traffic_eng: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:interface)|
        (?:auto-tunnel)|
        (?:router-id)|
        (?:{{ctx_pop_configure_terminal}})
      )
    )
  ctx_pop_mpls_traffic_eng_interface: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:interface)|
        (?:auto-tunnel)|
        (?:{{ctx_pop_mpls_traffic_eng}})
      )
    )
  ctx_pop_router_hsrp: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:interface)|
        (?:{{ctx_pop_configure_terminal}})
      )
    )
  ctx_pop_router_hsrp_interface: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:address-family)|
        (?:{{ctx_pop_router_hsrp}})
      )
    )
  ctx_pop_router_hsrp_interface_address_family: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:hsrp)|
        (?:{{ctx_pop_router_hsrp_interface}})
      )
    )
  ctx_pop_router_isis: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:address-family)|
        (?:net)|
        (?:adjacency)|
        (?:{{ctx_pop_configure_terminal}})
      )
    )
  ctx_pop_router_eigrp: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:vrf)|
        (?:{{ctx_pop_configure_terminal}})
      )
    )
  ctx_pop_router_eigrp_vrf: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:address-family)|
        (?:{{ctx_pop_router_eigrp}})
      )
    )
  ctx_pop_router_eigrp_vrf_address_family: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:router-id)|
        (?:autonomous-system)|
        (?:redistribute)|
        (?:{{ctx_pop_router_eigrp_vrf}})
      )
    )
  ctx_pop_router_bgp: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:bgp)|
        (?:af-group)|
        (?:address-family)|
        (?:session-group)|
        (?:neighbor)|
        (?:neighbor-group)|
        (?:vrf)|
        (?:{{ctx_pop_configure_terminal}})
      )
    )
  ctx_pop_router_bgp_vrf: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:rd)|
        (?:address-family)|
        (?:neighbor)|
        (?:{{ctx_pop_router_bgp}})
      )
    )
  ctx_pop_router_bgp_neighbor: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:remote-as)|
        (?:{{ctx_pop_router_bgp}})
      )
    )
  ctx_pop_router_bgp_neighbor_group: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:remote-as)|
        (?:{{ctx_pop_router_bgp}})
      )
    )
  ctx_pop_router_ospf_area: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:interface)|
        (?:{{ctx_pop_router_ospf}})
      )
    )
  ctx_pop_router_ospf: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:area)|
        (?:router-id)|
        (?:log-adjacency-changes)|
        (?:domain-id)|
        (?:redistribute)|
        (?:address-family)|
        (?:{{ctx_pop_configure_terminal}})
      )
    )
  ctx_pop_router_static: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:address-family)|
        (?:{{ctx_pop_configure_terminal}})
      )
    )
  ctx_l2vpn: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:bridge\s+group\s+\d+)|
        (?:{{ctx_pop_configure_terminal}})
      )
    )
  ctx_l2vpn_bridge_group: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:bridge-domain\s+\d+)|
        (?:{{ctx_l2vpn}})
      )
    )
  ctx_l2vpn_bridge_group_bridge_domain: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:interface\s+\S+)|
        (?:{{ctx_l2vpn_bridge_group}})
      )
    )

  ctx_pop_vrf: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:address-family)|
        (?:vrf)|
        (?:{{ctx_pop_configure_terminal}})
      )
    )
  ctx_pop_vrf_address_family: |
    (?xi)
    (?=
      ^\s*
      (?:
        (?:import)|
        (?:export)|
        (?:{{ctx_pop_vrf}})
      )
    )
  ip: '(?:(?:(?:{{number_8_bit}})\.){3}(?:{{number_8_bit}}))'
  wildcard_mask: |
    (?xi)
    (?:
      (?:127\.255\.255\.255)|
      (?:63\.255\.255\.255)|
      (?:31\.255\.255\.255)|
      (?:15\.255\.255\.255)|
      (?:7\.255\.255\.255)|
      (?:3\.255\.255\.255)|
      (?:1\.255\.255\.255)|
      (?:0\.255\.255\.255)|
      (?:0\.127\.255\.255)|
      (?:0\.63\.255\.255)|
      (?:0\.31\.255\.255)|
      (?:0\.15\.255\.255)|
      (?:0\.7\.255\.255)|
      (?:0\.3\.255\.255)|
      (?:0\.1\.255\.255)|
      (?:0\.0\.255\.255)|
      (?:0\.0\.127\.255)|
      (?:0\.0\.63\.255)|
      (?:0\.0\.31\.255)|
      (?:0\.0\.15\.255)|
      (?:0\.0\.7\.255)|
      (?:0\.0\.3\.255)|
      (?:0\.0\.1\.255)|
      (?:0\.0\.0\.255)|
      (?:0\.0\.0\.127)|
      (?:0\.0\.0\.63)|
      (?:0\.0\.0\.31)|
      (?:0\.0\.0\.15)|
      (?:0\.0\.0\.7)|
      (?:0\.0\.0\.3)|
      (?:0\.0\.0\.1)|
      (?:0\.0\.0\.0)
    )
  subnet_mask: |
    (?xi)
    (?:
        (?:0\.0\.0\.0)|
        (?:128\.0\.0\.0)|
        (?:192\.0\.0\.0)|
        (?:224\.0\.0\.0)|
        (?:240\.0\.0\.0)|
        (?:248\.0\.0\.0)|
        (?:252\.0\.0\.0)|
        (?:254\.0\.0\.0)|
        (?:255\.0\.0\.0)|
        (?:255\.128\.0\.0)|
        (?:255\.192\.0\.0)|
        (?:255\.224\.0\.0)|
        (?:255\.240\.0\.0)|
        (?:255\.248\.0\.0)|
        (?:255\.252\.0\.0)|
        (?:255\.254\.0\.0)|
        (?:255\.255\.0\.0)|
        (?:255\.255\.128\.0)|
        (?:255\.255\.192\.0)|
        (?:255\.255\.224\.0)|
        (?:255\.255\.240\.0)|
        (?:255\.255\.248\.0)|
        (?:255\.255\.252\.0)|
        (?:255\.255\.254\.0)|
        (?:255\.255\.255\.0)|
        (?:255\.255\.255\.128)|
        (?:255\.255\.255\.192)|
        (?:255\.255\.255\.224)|
        (?:255\.255\.255\.240)|
        (?:255\.255\.255\.248)|
        (?:255\.255\.255\.252)|
        (?:255\.255\.255\.254)|
        (?:255\.255\.255\.255)
    )
  ipv4_prefix_length: '(?:\b(?:(?:[0-2]?\d)|(?:3[0-2]))\b)'
  ip_prefix: '(?:{{ip}}/{{ipv4_prefix_length}})'
  isis_network_entity_title: |
    (?xi)
    [a-f0-9]{2}\.(?:[a-f0-9]{4}\.){3,9}00
  ipv6_prefix_length: |
    (?xi)
      (?:
        (?:12[0-8])|
        (?:1[0-1]\d)|
        (?:\d{1,2})
      )
  ipv6_prefix: '(?:(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(?:%.+)?/{{ipv6_prefix_length}}|::/0))'
  ipv6: '(?:(?:(?:(?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:))|(?:(?:[0-9A-Fa-f]{1,4}:){6}(?::[0-9A-Fa-f]{1,4}|(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){5}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(?:(?:[0-9A-Fa-f]{1,4}:){4}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,3})|(?:(?::[0-9A-Fa-f]{1,4})?:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){3}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,4})|(?:(?::[0-9A-Fa-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){2}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,5})|(?:(?::[0-9A-Fa-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?:(?:[0-9A-Fa-f]{1,4}:){1}(?:(?:(?::[0-9A-Fa-f]{1,4}){1,6})|(?:(?::[0-9A-Fa-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(?::(?:(?:(?::[0-9A-Fa-f]{1,4}){1,7})|(?:(?::[0-9A-Fa-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(?:%.+)?)'
  vlan_id: |
    (?xi)
    (?:
      (?:[0-3]\d{2,3})|
      (?:40[0-9][0-5])|
      (?:\d{2,3})|
      [1-9]
    )
  vlan_range: |
    (?xi)
    (?:
      {{vlan_id}}
      (?:
        (?:
          (?:-)|(?:,)
        )
        {{vlan_id}}
      )*
    )
  network_address: '(?:{{ip}})\s+(?:{{wildcard_mask}})'

  interface_names_w_null: |
    (?xi)
    (?:
      (?:{{interface_names}})|
      (?:Null)|
      (?:Nu)
    )

  interface_names: |
    (?xi)
    (?:
      (?:Null)|
      (?:Null)|
      (?:BVI)|
      (?:bundle-ether)|
      (?:Ethernet)|
      (?:Et)|
      (?:FastEthernet)|
      (?:Fa)|
      (?:FortyGigE)|
      (?:FortyGigabitEthernet)|
      (?:Fo)|
      (?:GigabitEthernet)|
      (?:Gi)|
      (?:HundredGigE)|
      (?:loopback)|
      (?:lo)|
      (?:mgmteth)|
      (?:port-channel)|
      (?:po)|
      (?:pos)|
      (?:ptp)|
      (?:serial)|
      (?:se)|
      (?:TwentyFiveGigE)|
      (?:TwentyFiveGigEthernet)|
      (?:Twe)|
      (?:TenGigabitEthernet)|
      (?:TenGigE)|
      (?:Te)|
      (?:tunnel)|
      (?:Dot11Radio)|
      (?:tu)|
      (?:vlan)|
      (?:vl)
    )
  interface_numbers: |
    (?xi)
    (?:
      (?:(?:\d+(?:/\d+)?(?:/RSP\d+)?/CPU\d+/\d+))|
      (?:(?:\d+(?:/\d+)*(?:\.\d+)?)?)
    )
  interface_number_ranged: |
    (?xi)
    (?:\d+(?:/\d+)*(?:\.\d+)?)(?:\s*-\s*\d+)?
  port_names: |
    (?xi)
    (?:
      (?:bgp)|
      (?:bootps)|
      (?:bootpc)|
      (?:ssh)|
      (?:ftp-data)|
      (?:ftp)|
      (?:domain)|
      (?:ntp)|
      (?:snmptrap)|
      (?:syslog)|
      (?:telnet)|
      (?:tacacs)|
      (?:isakmp)|
      (?:snmp)
    )
  port_numbers: '(?:(?:[1-6]?\d{1,4}))'
  operators: |
    (?xi)
    (?:
      (?:eq)|
      (?:neq)|
      (?:ge)|
      (?:gt)|
      (?:lt)|
      (?:le)
    )
  ospf_area_id: |
    (?xi)
    (?:
      \b
      (?:
        (?:{{ip}})|
        (?:{{number_32_bit}})
      )
      \b
    )
  rpl_end_of_condition_statement: |
    (?xi)
    (?:
      (?:\s+then)|
      (?:\s+and)|
      (?:\s+or)|
      (?:\s*\))
    )
  drives: |
    (?xi)
    (?:
      (?:(?:(?:running)|(?:startup))-config)|
      (?:flash)|
      (?:disk(?:[0-3])?)
    )
  uri: '(?<protocol>(?:t?ftp)|scp)(?<protocol_seperator>://)(?<hostname>(?:\d+\.){3}\d+)(?<path>\/\S*)'
  rpl_inline_single_quote_space_separated_lookahead: |
    (?xi)
    (?=
      (?:
        (?:
          \'\s*
          (?:
            (?:{{rpl_inline_statement}}\s+)*
            (?:{{rpl_inline_statement}})
          )?
          \s*\'
        )|
        (?:{{rpl_parameter}})|
        (?:{{rpl_set_name}})
      )
      {{rpl_end_of_condition_statement}}
    )

  rpl_inline_parentheses_comma_separated_lookahead: |
    (?xi)
    (?=
      (?:
        (?:
          \(
          (?:
            (?:\s*{{rpl_inline_statement}}\s*,)*
            (?:\s*{{rpl_inline_statement}}\s*)
          )?
          \s*
          \)
        )|
        (?:{{rpl_parameter}})|
        (?:{{rpl_set_name}})
      )
      \s*$
    )
  rpl_inline_parentheses_comma_separated_lookahead_w_additive: |
    (?xi)
    (?=
      (?:
        (?:
          (?:
            \(
            (?:
              (?:\s*{{rpl_inline_statement}}\s*,)*
              (?:\s*{{rpl_inline_statement}}\s*)
            )?
            \s*
            \)
          )|
          (?:{{rpl_parameter}})|
          (?:{{rpl_set_name}})
        )
        (?:\s+additive)?
      )
      \s*
      $
    )
  rpl_inline_condition_parentheses_comma_separated_lookahead: |
    (?xi)
    (?=
      (?:
        (?:
          \(
          (?:
            (?:\s*{{rpl_inline_statement}}\s*,)*
            (?:\s*{{rpl_inline_statement}}\s*)
          )?
          \s*
          \)
        )|
        (?:{{rpl_parameter}})|
        (?:{{rpl_set_name}})
      )
      {{rpl_end_of_condition_statement}}
    )

contexts:

  main:
    - include: configure_terminal
    - include: configure_terminal_scope
    - include: scope


  prototype:
    - include: device_comment
    - include: pop_ctx_word
    - include: comment
    - include: pipe
    - include: scope

  scope:
    - include: removal
    - include: pop_ctx_word
    - include: comment


  pop_on_configure_terminal_context:
    - match: |
        (?xi)
        (?=
          ^\s*
          {{ctx_pop_configure_terminal}}
        )
      pop: true

  removal:
    - meta_include_prototype: false
    - match: ^\s*(no\s[^{{comment}}]*)
      scope: text.network.cisco.removal
      captures:
        1: keyword.other

  pop_ctx_word:
    - match: ^(!)$
      captures:
        1: comment.line
      pop: true
    - match: ({{pop_ctx}})
      pop: true
      captures:
        1: comment.line
    - match: '^\s*(end)\s*$'
      captures:
        1: comment.block.documentation
      pop: true

  pop_context_on_unknown:
    - match: '(?=^\s*[^{{comment}}\s].*$)'
      pop: true

  configure_terminal:
    - match: ^\s*(?:(conf(?:igure)?))\s*$
      # with_prototype:
      #   - include: scope
      captures:
        0: cisco.scope
        1: variable.parameter
      # push:
        # - meta_content_scope: text.network.cisco.configure_terminal
        # - include: configure_terminal_scope

  exec:
    - include: exec_isis

  configure_terminal_scope:
    - include: exec
    - include: commit
    - include: clock
    - include: alias
    - include: router_bgp
    - include: router_eigrp
    - include: router_hsrp
    - include: mpls_traffic_eng
    - include: mpls_ldp
    - include: vrf
    - include: lacp
    - include: policy_global
    - include: ntp
    - include: hostname
    - include: domain
    - include: ssh_server
    - include: cdp
    - include: interface
    - include: l2_vpn
    - include: interface_management
    - include: rpl_set_definition
    - include: route_policy
    - include: rpl_editor
    - include: rpl_maximum
    - include: router_static
    - include: router_isis
    - include: router_ospf
    - include: line_console
    - include: line_default
    - include: username
    - include: usergroup
    - include: taskgroup
    - include: mpls_traffic_eng_path_selection_ignore_overload
    - include: object_group

  device_comment:
    - match: |
        (?xi)
        ^(
          \s*
          {{comment}}
          \s+
          (?:
            (?:on)|
            (?:devices?)
          )
          \s+
          \S.*
        )$
      scope: text.network.cisco.comment
      captures:
        0: cisco.scope
        1: comment.line

  comment:
    - match: ({{comment}}.*)$
      scope: text.network.cisco.comment
      captures:
        1: comment.line

  domain:
    - match: |
        (?xi)
        ^\s*
        (domain)\s+(name)\s+(\S+)
      captures:
        1: support.constant
        2: support.constant
        3: string.unquoted

  cdp:
    - match: ^\s*(cdp)
      captures:
        1: support.constant


  hostname:
    - match: ^\s*(hostname)\s*(\S+)
      captures:
        1: support.constant
        2: string.unquoted

  commit:
    - match: ^\s*(commit)
      captures:
        1: support.constant

  alias:
    - match: ^\s*(alias)\s+(\S+)\s+
      captures:
        1: support.constant
        2: string.unquoted

  lacp:
    - include: lacp_system

  lacp_system:
    - match: |
        (?xi)
        ^\s*(lacp)\s+(system)\s+
        (?:
          ({{mac_address}})|
          ({{number_16_bit_wo_zero}})
        )
        \s*$
      captures:
        1: support.constant
        2: support.constant
        3: constant.numeric.mac
        4: constant.numeric

  mpls_ldp:
    - match: |
        (?xi)
        ^\s*(mpls)\s+(ldp)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
      push:
        - meta_content_scope: text.network.cisco.mpls.ldp
        - include: mpls_ldp_setting
        - include: pop_on_configure_terminal_context

  mpls_ldp_setting:
    - include: router_id

  mpls_traffic_eng:
    - match: |
        (?xi)
        ^\s*(mpls)\s+(traffic-eng)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
      push:
        - meta_content_scope: text.network.cisco.mpls.traffic_eng
        - include: mpls_traffic_eng_setting
        - include: mpls_traffic_eng_interface
        - include: mpls_traffic_eng_auto_tunnel_backup
        - include: pop_on_configure_terminal_context

  mpls_traffic_eng_setting:
    - include: mpls_router_id_secondary

  mpls_router_id_secondary:
    - match: |
        (?xi)
        ^\s*(router-id)\s+(secondary)\s+({{ip}})\s*$
      captures:
        1: support.constant
        2: support.constant
        3: constant.numeric.ip.ipv4.address

  mpls_tunnel_id:
    - match: |
        (?xi)
        ^\s*(tunnel-id)
        (?:\s+(min)\s+({{number_16_bit}}))?
        (?:\s+(max)\s+({{number_16_bit}}))?
        \s*$
      captures:
        1: support.constant
        2: support.constant
        3: constant.numeric
        4: support.constant
        5: constant.numeric

  mpls_traffic_eng_interface:
    - match: |
        (?xi)
        ^\s*
        (?:
          (interface)\s+
          (?:
            (?:(tunnel)-(te)(\d+))|
            (?:(range)\s+({{interface_names}})\s*({{interface_number_ranged}}))|
            (?:({{interface_names}})\s*({{interface_numbers}}))
          )
        )
      captures:
        0: cisco.scope.interface
        1: variable.parameter              # interface
        2: entity.other.attribute-name     # tunnel
        3: constant.numeric                # tunnel te
        4: constant.numeric                # tunnel te123
        5: support.constant                # interface range
        6: entity.other.attribute-name     # interface range Loopback
        7: constant.numeric                # interface range Loopback 1-2
        8: entity.other.attribute-name     # interface Loopback
        9: constant.numeric                # interface Loopback 1
      push:
        - meta_content_scope: text.network.cisco.mpls.traffic_eng.interface
        - include: mpls_traffic_eng_interface_setting
        - match: '{{ctx_pop_mpls_traffic_eng}}'
          pop: true

  mpls_traffic_eng_interface_setting:
    - include:  mpls_traffic_eng_interface_auto_tunnel_backup

  mpls_traffic_eng_auto_tunnel_backup:
    - match: |
        (?xi)
        ^\s*(auto-tunnel)\s+(backup)\s*$
      captures:
        0: cisco.scope.interface
        1: variable.parameter
        2: support.constant
      push:
        - meta_content_scope: text.network.cisco.mpls.traffic_eng.auto_tunnel_backup
        - include: mpls_tunnel_id
        - match: '{{ctx_pop_mpls_traffic_eng}}'
          pop: true

  mpls_traffic_eng_interface_auto_tunnel_backup:
    - match: |
        (?xi)
        ^\s*(auto-tunnel)\s+(backup)\s*$
      captures:
        0: cisco.scope.interface
        1: variable.parameter
        2: support.constant
      push:
        - meta_content_scope: text.network.cisco.mpls.traffic_eng.interface.auto_tunnel_backup
        - include: mpls_tunnel_id
        - match: '{{ctx_pop_mpls_traffic_eng_interface}}'
          pop: true

  router_hsrp:
    - match: |
        (?xi)
        ^\s*(router)\s+(hsrp)
        \s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push:
        - meta_content_scope: text.network.cisco.router.hsrp
        - include: router_hsrp_interface
        - include: pop_on_configure_terminal_context

  router_hsrp_interface:
    - match: |
        (?xi)
        ^\s*
        (?:
          (interface)\s+
          (?:
            (?:(tunnel)-(te)(\d+))|
            (?:({{interface_names}})\s*({{interface_numbers}}))
          )
        )
      captures:
        0: cisco.scope.ospf.area.interface
        1: variable.parameter              # interface
        2: entity.other.attribute-name     # tunnel
        3: constant.numeric                # tunnel te
        4: constant.numeric                # tunnel te123
        5: entity.other.attribute-name     # interface Loopback
        6: constant.numeric                # interface Loopback 1
      push:
        - meta_content_scope: text.network.cisco.router.hsrp.interface
        - include: hsrp_interface_address_family
        - match: '{{ctx_pop_router_hsrp}}'
          pop: true

  hsrp_interface_address_family:
    - include: hsrp_interface_ipv4_address_family
    - include: hsrp_interface_ipv6_address_family

  hsrp_interface_ipv4_address_family:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)
        \s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
      push:
      - meta_content_scope: text.network.cisco.router.hsrp.interface.address_family.ipv4
      - include: hsrp_interface_address_family_ipv4_hsrp
      - match: '{{ctx_pop_router_hsrp_interface}}'
        pop: true

  hsrp_interface_ipv6_address_family:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        \s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.router.hsrp.interface.address_family.ipv6
      - include: hsrp_interface_address_family_ipv6_hsrp
      - match: '{{ctx_pop_router_hsrp_interface}}'
        pop: true

  hsrp_interface_address_family_ipv4_hsrp:
    - match: |
        (?xi)
        ^\s*(hsrp)(?:\s+({{number_range_0_4095}}))?(?:\s+(version)\s+(2))?
        \s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.numeric
        3: support.constant
        4: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.router.hsrp.interface.address_family.ipv4.hsrp
      - include: hsrp_interface_address_family_hsrp_settings
      - include: hsrp_ipv4_address
      - match: '{{ctx_pop_router_hsrp_interface_address_family}}'
        pop: true

  hsrp_interface_address_family_ipv6_hsrp:
    - match: |
        (?xi)
        ^\s*(hsrp)(?:\s+({{number_range_0_4095}}))?
        \s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.router.hsrp.interface.address_family.ipv6.hsrp
      - include: hsrp_interface_address_family_hsrp_settings
      - match: '{{ctx_pop_router_hsrp_interface_address_family}}'
        pop: true

  hsrp_interface_address_family_hsrp_settings:
    - include: hsrp_preempt
    - include: hsrp_priority
    - include: hsrp_track
    - include: hsrp_timers

  hsrp_preempt:
    - match: |
        (?xi)
        ^\s*(preempt)(?:\s+(delay)\s+({{number_range_0_3600}}))?
        \s*$
      captures:
        1: support.constant
        2: support.constant
        3: constant.numeric

  hsrp_ipv4_address:
    - match: |
        (?xi)
        ^\s*(address)\s+
        (?:
          ({{ip}})|
          (learn)
        )
        \s*$
      captures:
        1: support.constant
        2: constant.numeric.ip.ipv4.address
        3: support.constant

  hsrp_priority:
    - match: |
        (?xi)
        ^\s*(priority)\s+({{number_8_bit}})
        \s*$
      captures:
        1: support.constant
        2: constant.numeric

  hsrp_timers:
    - match: |
        (?xi)
        ^\s*(timers)\s+
        (?:
          ({{number_8_bit}})|
          (?:(msec)\s+({{number_range_100_3000}}))
        )
        \s+
        (?:
          ({{number_8_bit}})|
          (?:(msec)\s+({{number_range_100_3000}}))
        )
        \s*$
      captures:
        1: support.constant
        2: constant.numeric
        3: support.constant
        4: constant.numeric
        5: constant.numeric
        6: support.constant
        7: constant.numeric

  hsrp_track:
    - match: |
        (?xi)
        ^\s*(track)\s+({{interface_names}})\s*({{interface_numbers}})(?:\s+({{number_8_bit}}))?
        \s*$
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric
        4: constant.numeric

  router_eigrp:
    - match: |
        (?xi)
        ^\s*(router)\s+(eigrp)\s+
        (?:
          ({{number_16_bit_wo_zero}})|
          ({{eigrp_virtual_instance_name}})
        )
        \s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.numeric.as
        4: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.eigrp
        # - include: router_eigrp_setting
        - include: router_eigrp_vrf
        - include: router_eigrp_address_family
        - include: pop_on_configure_terminal_context

  router_eigrp_address_family:
    - include: router_eigrp_address_family_ipv4
    - include: router_eigrp_address_family_ipv6

  router_eigrp_address_family_ipv4:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
      push:
      - meta_content_scope: text.network.cisco.eigrp.address_family.ipv4
      - include: router_id
      - include: eigrp_autonomous_system
      - include: router_eigrp_redistribute
      - match: '{{ctx_pop_router_eigrp}}'
        pop: true

  router_eigrp_address_family_ipv6:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.eigrp.address_family.ipv4
      - match: '{{ctx_pop_router_eigrp}}'
        pop: true

  router_eigrp_vrf:
    - match: '^\s*(vrf)\s+({{vrf_name}})'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.eigrp.vrf
      - include: router_eigrp_vrf_address_family
      - match: '{{ctx_pop_router_eigrp}}'
        pop: true

  eigrp_autonomous_system:
    - match: |
        (?xi)
        ^\s*(autonomous-system)\s+({{number_16_bit_wo_zero}})\s*$
      captures:
        1: support.constant
        2: constant.numeric.ip.ipv4.address


  router_eigrp_redistribute:
    - include: router_eigrp_redistribute_bgp
    - include: router_eigrp_redistribute_ospf
    - include: router_eigrp_redistribute_eigrp
    - include: router_eigrp_redistribute_static
    - include: router_eigrp_redistribute_connected

  router_eigrp_redistribute_static:
    - match: |
        (?xi)
        ^\s*
        (redistribute)\s+(static)
        (?:\s+(route-policy)\s+(\S+))?
        \s*$
      captures:
        1: support.constant
        2: constant.character
        3: support.constant
        4: string.unquoted

  router_eigrp_redistribute_connected:
    - match: |
        (?xi)
        ^\s*
        (redistribute)\s+(connected)
        (?:\s+(route-policy)\s+(\S+))?
        \s*$
      captures:
        1: support.constant
        2: constant.language
        3: support.constant
        4: string.unquoted

  router_eigrp_redistribute_bgp:
    - match: |
        (?xi)
        ^\s*
        (redistribute)\s+(bgp)
        \s+
        ({{autonomous_system}})
        (?:\s+(route-policy)\s+(\S+))?
        \s*$
      captures:
        1: support.constant
        2: constant.language
        3: constant.numeric.as
        4: support.constant
        5: string.unquoted

  router_eigrp_redistribute_eigrp:
    - match: |
        (?xi)
        ^\s*
        (redistribute)\s+(eigrp)
        \s+
        ({{number_16_bit_wo_zero}})
        (?:\s+(route-policy)\s+(\S+))?
        \s*$
      captures:
        1: support.constant
        2: constant.language
        3: constant.numeric.as
        4: support.constant
        5: string.unquoted

  router_eigrp_redistribute_ospf:
    - match: |
        (?xi)
        ^\s*
        (redistribute)\s+(ospf)
        \s+
        ({{ospf_identifier}})
        (?:\s+(route-policy)\s+(\S+))?
        \s*$
      captures:
        1: support.constant
        2: constant.language
        3: string.unquoted
        4: support.constant
        5: string.unquoted

  router_eigrp_vrf_address_family:
    - include: router_eigrp_vrf_address_family_ipv4
    - include: router_eigrp_vrf_address_family_ipv6

  router_eigrp_vrf_address_family_ipv4:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
      push:
      - meta_content_scope: text.network.cisco.eigrp.vrf.address_family.ipv4
      - include: router_id
      - include: eigrp_autonomous_system
      - include: router_eigrp_redistribute
      - match: '{{ctx_pop_router_eigrp_vrf}}'
        pop: true

  router_eigrp_vrf_address_family_ipv6:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.eigrp.vrf.address_family.ipv4
      - include: eigrp_autonomous_system
      - match: '{{ctx_pop_router_eigrp_vrf}}'
        pop: true

  router_eigrp_vrf_address_family_ipv4_interface:
    - match: |
        (?xi)
        ^\s*(interface)\s+({{interface_names}})\s*({{interface_numbers}})\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: entity.other.attribute-name
        3: constant.numeric
      push:
        - meta_content_scope: text.network.cisco.eigrp.vrf.address_family.ipv4.interface
        - match: '{{ctx_pop_router_eigrp_vrf}}'
          pop: true

  clock:
    - include: clock_timezone
    - include: clock_summertime

  clock_timezone:
    - match: |
        (?xi)
        ^\s*(clock)\s+(timezone)\s+({{timezones}})\s+
        (
          (?:\+)|
          (?:-)
        )
        (
          (?:2[0-3])|
          (?:1\d)|
          (?:\d)
        )
        (?:
          \s+
          ([1-5]?\d+)
        )?
      captures:
        1: support.constant
        2: support.constant
        3: constant.language
        4: constant.numeric
        5: constant.numeric
        6: constant.numeric

  clock_summertime:
    - match: |
        (?xi)
        ^\s*
        (clock)\s+(summer-time)\s+({{timezones}})\s+
        (?:
          (?:
            (date)\s+
            (?:
              (?:
                ({{month_names}})\s+
                ({{day_of_month}})\s+
                ({{year}})\s+
                ({{time_24_hour}})\s+
                ({{month_names}})\s+
                ({{day_of_month}})\s+
                ({{year}})\s+
                ({{time_24_hour}})
              )|
              (?:
                ({{day_of_month}})\s+
                ({{month_names}})\s+
                ({{year}})\s+
                ({{time_24_hour}})\s+
                ({{day_of_month}})\s+
                ({{month_names}})\s+
                ({{year}})\s+
                ({{time_24_hour}})
              )
            )
          )|
          (?:
            (recurring)\s+
            (
              (?:[1-5])|
              (?:first)|
              (?:last)
            )\s+
            ({{day_of_month}})\s+
            ({{month_names}})\s+
            ({{time_24_hour}})\s+
            (
              (?:[1-5])|
              (?:first)|
              (?:last)
            )\s+
            ({{day_of_month}})\s+
            ({{month_names}})\s+
            ({{time_24_hour}})
          )
        )
        (?:
          \s+
          ({{minutes}})
        )?
      captures:
        1: support.constant
        2: support.constant
        3: constant.language
        4: support.constant
        5: entity.other.attribute-name
        6: constant.numeric
        7: constant.numeric
        8: constant.numeric
        9: entity.other.attribute-name
        10: constant.numeric
        11: constant.numeric
        12: constant.numeric
        13: constant.numeric
        14: entity.other.attribute-name
        15: constant.numeric
        16: constant.numeric
        17: constant.numeric
        18: entity.other.attribute-name
        19: constant.numeric
        20: constant.numeric
        21: support.constant
        22: constant.numeric
        23: constant.numeric
        24: entity.other.attribute-name
        25: constant.numeric
        26: constant.numeric
        27: constant.numeric
        28: entity.other.attribute-name
        29: constant.numeric
        30: constant.numeric

  object_group:
    - include: object_group_network_ipv4
    - include: object_group_network_ipv6
    - include: object_group_port

  object_group_port:
    - match: |
        (?xi)
        ^\s*(object-group)\s+(port)\s+(\S+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.object-group.port
        - include: description
        - include: object_group_object_group
        - include: object_group_port_range
        - include: object_group_port_number
        - include: pop_on_configure_terminal_context

  object_group_port_number:
    - match: |
        (?xi)
        ^\s*(
          (?:eq)|
          (?:lt)|
          (?:gt)
        )\s+
        (?:
          ({{number_16_bit_wo_zero}})|
          ({{port_names}})
        )
      captures:
        1: support.constant
        2: constant.numeric
        3: constant.language

  object_group_port_range:
    - match: |
        (?xi)
        ^\s*(range)\s+
        (?:
          ({{number_16_bit_wo_zero}})|
          ({{port_names}})
        )
        \s+
        (?:
          ({{number_16_bit_wo_zero}})|
          ({{port_names}})
        )
      captures:
        1: support.constant
        2: constant.numeric
        3: constant.language
        4: constant.numeric
        5: constant.language


  object_group_network_ipv4:
    - match: |
        (?xi)
        ^\s*(object-group)\s+(network)\s+(ipv4)\s+(\S+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.language
        4: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.object-group.network.ipv4
        - include: description
        - include: object_group_host_ipv4
        - include: object_group_network_ipv4_entry
        - include: object_group_network_ipv4_range
        - include: object_group_object_group
        - include: pop_on_configure_terminal_context

  object_group_network_ipv6:
    - match: |
        (?xi)
        ^\s*(object-group)\s+(network)\s+(ipv6)\s+(\S+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.language
        4: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.object-group.network.ipv6
        - include: description
        - include: object_group_host_ipv6
        - include: object_group_object_group
        - include: object_group_network_ipv6_entry
        - include: object_group_network_ipv6_range
        - include: pop_on_configure_terminal_context


  object_group_host_ipv4:
    - match: |
        (?xi)
        ^\s*(host)\s+({{ip}})
      captures:
        1: support.constant
        2: constant.numeric.ip.ipv4.address

  object_group_network_ipv4_entry:
    - match: |
        (?xi)
        ^\s*
        (?:
          (?:({{ip_prefix}}))|
          (?:({{ip}})\s+({{subnet_mask}}))
        )
      captures:
        1: constant.numeric.ip.ipv4.prefix
        2: constant.numeric.ip.ipv4.address
        3: constant.numeric.network.ipv4.subnet_mask

  object_group_network_ipv6_entry:
    - match: |
        (?xi)
        ^\s*({{ipv6_prefix}})
      captures:
        1: constant.numeric.ip.ipv6.prefix

  object_group_object_group:
    - match: |
        (?xi)
        ^\s*(object-group)\s+(\S+)\s*$
      captures:
        1: support.constant
        2: string.unquoted

  object_group_network_ipv4_range:
    - match: |
        (?xi)
        ^\s*(range)\s+({{ip}})\s+({{ip}})
      captures:
        1: support.constant
        2: constant.numeric.ip.ipv4.address
        3: constant.numeric.ip.ipv4.address

  object_group_network_ipv6_range:
    - match: |
        (?xi)
        ^\s*(range)\s+({{ipv6}})\s+({{ipv6}})
      captures:
        1: support.constant
        2: constant.numeric.ip.ipv6.address
        3: constant.numeric.ip.ipv6.address

  object_group_host_ipv6:
    - match: |
        (?xi)
        ^\s*(host)\s+({{ipv6}})
      captures:
        1: support.constant
        2: constant.numeric.ip.ipv6.address


  usergroup:
    - match: |
        (?xi)
        ^\s*(usergroup)\s+([^\s"]+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.usergroup
        - include: description
        - include: usergroup_inherit
        - include: usergroup_taskgroup
        - include: pop_on_configure_terminal_context

  usergroup_inherit:
    - match: |
        (?xi)
        ^\s*(inherit)\s+(usergroup)\s+([^\s"]{2,253})
      captures:
        1: support.constant
        2: support.constant
        3: string.unquoted

  usergroup_taskgroup:
    - match: |
        (?xi)
        ^\s*(taskgroup)\s+(\S+)
      captures:
        1: support.constant
        2: string.unquoted

  taskgroup:
    - match: |
        (?xi)
        ^\s*(taskgroup)\s+(\S+)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.taskgroup
        - include: taskgroup_task
        - include: taskgroup_inherit
        - include: description
        - include: pop_on_configure_terminal_context

  taskgroup_task:
    - match: |
        (?xi)
        ^\s*(task)\s+
        (
          (?:read)|
          (?:write)|
          (?:execute)|
          (?:debug)
        )
        \s+(\S+)
      captures:
        1: support.constant
        2: constant.language
        3: string.unquoted

  taskgroup_inherit:
    - match: |
        (?xi)
        ^\s*(inherit)\s+(taskgroup)\s+(\S+)
      captures:
        1: support.constant
        2: support.constant
        3: string.unquoted

  username:
    - match: |
        (?xi)
        ^\s*(username)\s+([^\s"]{2,253})
        (?:
           \s+
           (?:
            (?:
              (password)\s+
              (?:
                (?:(7)\s+(\S+))|
                (?:(0\s+)?(\S+))
              )
            )|
            (?:(password-policy)\s+(\S+))|
            (?:
              (secret)\s+
              (?:
                (?:(5)\s+(\S+))|
                (?:(0\s+)?(\S+))
              )
            )|
            (?:(group)\s+(\S+))
           )
        )?
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
        3: support.constant
        4: constant.numeric
        5: string.unquoted
        6: constant.numeric
        7: string.unquoted.cisco.password.type.7
        8: variable.parameter
        9: string.unquoted
        10: support.constant
        11: constant.numeric
        12: string.unquoted
        13: constant.numeric
        14: string.unquoted.cisco.password.type.5
        15: variable.parameter
        16: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.username
        - include: username_group
        - include: username_password
        - include: username_password_policy
        - include: pop_on_configure_terminal_context


  username_group:
    - match: |
        (?xi)
        ^\s*(group)\s+(?:
          (
            (?:root-system)|
            (?:root-lr)|
            (?:netadmin)|
            (?:sysadmin)|
            (?:operator)|
            (?:cisco-support)|
            (?:serviceadmin)
          )|
          (\S+)
        )
      captures:
        1: support.constant
        2: constant.language
        3: string.unquoted


  username_password:
    - match: |
        (?xi)
        ^\s*(password)\s+(?:
          (?:(7)\s+(\S+))|
          (?:(0\s+)?(\S+))
        )
      captures:
        1: support.constant
        2: constant.numeric
        3: string.unquoted
        4: constant.numeric
        5: string.unquoted.cisco.password.type.7

  username_password_policy:
    - match: |
        (?xi)
        ^\s*(password-policy)\s+(\S+)
      captures:
        1: support.constant
        2: string.unquoted

  router_bgp:
    - match: |
        (?xi)
        ^\s*(router)\s+(bgp)\s+({{autonomous_system}})
        (?:\s+(instance)\s+(\S{1,32}))?
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: constant.numeric.as
        4: support.constant
        5: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.router.bgp
        - include: router_bgp_setting
        - include: router_bgp_address_family
        - include: router_bgp_neighbor
        - include: router_bgp_vrf
        - include: router_bgp_session_group
        - include: pop_on_configure_terminal_context

  router_bgp_setting:
    - include: router_bgp_setting_router_id

  router_bgp_setting_router_id:
    - match: '^\s*(bgp)\s+(router-id)\s+({{ip}})'
      captures:
        1: support.constant
        2: support.constant
        3: constant.numeric.ip.ipv4.address

  router_bgp_remote_as:
    - match: '^\s*(remote-as)\s+({{autonomous_system}})\s*$'
      captures:
        1: support.constant
        2: constant.numeric.as

  router_bgp_password:
    - match: |
        (?xi)
        ^\s*(password)\s+
        (?:
          (clear)|
          (encrypted)
        )
        \s+
        (\S{1,80})\s*$
      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: string.unquoted

  router_bgp_ignore_connected_check:
    - match: |
        (?xi)
        ^\s*(ignore-connected-check)\s+
      captures:
        1: support.constant

  router_bgp_update_source:
    - match: '^\s*(update-source)\s+({{interface_names}})\s*({{interface_numbers}})'
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: constant.numeric

  router_bgp_vrf:
    - match: '^\s*(vrf)\s+({{vrf_name}})'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.bgp.vrf
      - include: router_bgp_vrf_setting
      - include: router_bgp_vrf_neighbor
      - include: router_bgp_vrf_address_family
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_vrf_setting:
    - include: router_bgp_route_distinguisher

  router_bgp_redistribute_connected:
    - match: |
        (?xi)
        ^\s*(redistribute)\s+(connected)
        (?:\s+(metric)\s+({{number_32_bit}}))?
        (?:\s+(route-policy)\s+(\S+))?
        \s*$
      captures:
        1: support.constant
        2: constant.language
        3: support.constant
        4: constant.numeric
        5: support.constant
        6: string.unquoted

  router_bgp_redistribute_static:
    - match: |
        (?xi)
        ^\s*(redistribute)\s+(static)
        (?:\s+(metric)\s+({{number_32_bit}}))?
        (?:\s+(route-policy)\s+(\S+))?
        \s*$
      captures:
        1: support.constant
        2: constant.language
        3: support.constant
        4: constant.numeric
        5: support.constant
        6: string.unquoted

  default_originate:
    - match: |
        (?xi)
        ^\s*(default-originate)
        (?:
          \s+
          (?:
            (disable)|
            (?:(route-policy)\s+(\S+))
          )
        )?
      captures:
        1: support.constant
        2: keyword.other
        3: support.constant
        4: string.unquoted

  router_bgp_send_community:
    - match: |
        (?xi)
        ^\s*(send-community-ebgp)(\s+disable)?
      captures:
        1: support.constant
        2: keyword.other

  router_bgp_remove_private_as:
    - match: |
        (?xi)
        ^\s*(remove-private-as)(\s+disable)?
      captures:
        1: support.constant
        2: keyword.other

  router_bgp_route_reflector_client:
    - match: |
        (?xi)
        ^\s*(route-reflector-client)(\s+disable)?
      captures:
        1: support.constant
        2: keyword.other

  router_bgp_send_extended_community:
    - match: |
        (?xi)
        ^\s*(send-extended-community-ebgp)(\s+disable)?
      captures:
        1: support.constant
        2: keyword.other

  router_bgp_redistribute_eigrp:
    - match: |
        (?xi)
        ^\s*(redistribute)\s+(eigrp)\s+
        (?:
          ({{number_16_bit_wo_zero}})|
          ({{eigrp_virtual_instance_name}})
        )
        (?:\s+(match)\s+
          (
            (?:external)|
            (?:internal)
          )
        )?
        (?:\s+(metric)\s+({{number_32_bit}}))?
        (?:\s+(route-policy)\s+(\S+))?
        \s*$
      captures:
        1: support.constant
        2: constant.language
        3: constant.numeric
        4: string.unquoted
        5: support.constant
        6: constant.character
        7: support.constant
        8: constant.numeric
        9: support.constant
        10: string.unquoted

  router_bgp_redistribute_ospf:
    - match: |
        (?xi)
        ^\s*(redistribute)\s+(ospf)\s+({{ospf_identifier}})\s*$
      captures:
        1: support.constant
        2: constant.language
        3: string.unquoted

  router_bgp_route_distinguisher:
    - match: |
        (?xi)
        ^\s*(rd)\s+({{route_distinguisher}})\s*$
      captures:
        1: support.constant
        2: constant.numeric.route.distinguisher

  router_bgp_neighbor:
    - include: router_bgp_neighbor_group
    - include: router_bgp_neighbor_ipv4
    - include: router_bgp_neighbor_ipv6

  router_bgp_vrf_neighbor:
    - include: router_bgp_vrf_neighbor_ipv4
    - include: router_bgp_vrf_neighbor_ipv6

  router_bgp_vrf_address_family:
    - include: router_bgp_vrf_address_family_ipv4_multicast
    - include: router_bgp_vrf_address_family_ipv4_unicast
    - include: router_bgp_vrf_address_family_ipv4
    - include: router_bgp_vrf_address_family_ipv6_unicast
    - include: router_bgp_vrf_address_family_ipv6_multicast
    - include: router_bgp_vrf_address_family_ipv6
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_address_family:
    - include: router_bgp_af_group
    - include: router_bgp_address_family_ipv4
    - include: router_bgp_address_family_ipv4_multicast
    - include: router_bgp_address_family_ipv4_unicast
    - include: router_bgp_address_family_ipv6_unicast
    - include: router_bgp_address_family_ipv6_multicast
    - include: router_bgp_address_family_ipv6
    - include: router_bgp_address_family_vpnv4
    - include: router_bgp_address_family_vpnv6
    - include: router_bgp_address_family_l2vpn_vpls_vpws
    - include: router_bgp_address_family_link_state
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_neighbor_address_family_ipv4:
    - include: router_bgp_neighbor_address_family_ipv4_unicast
    - include: router_bgp_neighbor_address_family_ipv4_multicast
    - include: router_bgp_neighbor_address_family_vpnv4

  router_bgp_neighbor_address_family_ipv6:
    - include: router_bgp_neighbor_address_family_ipv6_unicast
    - include: router_bgp_neighbor_address_family_ipv6_multicast
    - include: router_bgp_neighbor_address_family_ipv6_flowspec
    - include: router_bgp_neighbor_address_family_ipv6_mvpn

  router_bgp_neighbor_group_address_family:
    - include: router_bgp_neighbor_group_address_family_ipv4_unicast
    - include: router_bgp_neighbor_group_address_family_ipv4_multicast
    - include: router_bgp_neighbor_group_address_family_vpnv4
    - include: router_bgp_neighbor_group_address_family_ipv6_unicast
    - include: router_bgp_neighbor_group_address_family_ipv6_multicast
    - include: router_bgp_neighbor_group_address_family_ipv6_flowspec
    - include: router_bgp_neighbor_group_address_family_ipv6_mvpn

  router_bgp_af_group:
    - include: router_bgp_af_group_ipv4_unicast
    - include: router_bgp_af_group_ipv4_multicast
    - include: router_bgp_af_group_ipv4_labeled_unicast
    - include: router_bgp_af_group_ipv4_tunnel
    - include: router_bgp_af_group_vpnv4_unicast
    - include: router_bgp_af_group_ipv6_unicast
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_address_family_settings:
    - include: router_bgp_maximum_prefix
    - include: router_bgp_redistribute_connected
    - include: router_bgp_redistribute_static
    - include: router_bgp_route_policy
    - include: router_bgp_soft_reconfiguration_inbound
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_address_family_ipv4_settings:
    - include: router_bgp_network_ipv4
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_address_family_ipv6_settings:
    - include: router_bgp_network_ipv6
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_vrf_address_family_settings:
    - include: router_bgp_maximum_prefix
    - include: router_bgp_redistribute_connected
    - include: router_bgp_redistribute_static
    - include: router_bgp_route_policy
    - include: router_bgp_soft_reconfiguration_inbound
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_vrf_address_family_ipv4_settings:
    - include: router_bgp_network_ipv4
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_vrf_address_family_ipv6_settings:
    - include: router_bgp_network_ipv6
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_af_group_settings:
    - include: router_bgp_use_af_group
    - include: router_bgp_use_session_group
    - include: router_bgp_route_policy
    - include: router_bgp_soft_reconfiguration_inbound
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_af_group_ipv4_settings:
    - include: router_bgp_network_ipv4
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_af_group_ipv6_settings:
    - include: router_bgp_network_ipv6
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_neighbor_address_family_settings:
    - include: router_bgp_maximum_prefix
    - include: router_bgp_redistribute_connected
    - include: router_bgp_redistribute_static
    - include: router_bgp_route_policy
    - include: router_bgp_soft_reconfiguration_inbound
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_neighbor_address_family_ipv4_settings:
    - include: router_bgp_network_ipv4
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_neighbor_address_family_ipv6_settings:
    - include: router_bgp_network_ipv6
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_neighbor_group_address_family_settings:
    - include: router_bgp_maximum_prefix
    - include: router_bgp_redistribute_connected
    - include: router_bgp_redistribute_static
    - include: router_bgp_route_policy
    - include: router_bgp_soft_reconfiguration_inbound
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_neighbor_group_address_family_ipv4_settings:
    - include: router_bgp_network_ipv4
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_neighbor_group_address_family_ipv6_settings:
    - include: router_bgp_network_ipv6
    - include: router_bgp_additional_paths
    - include: default_originate
    - include: router_bgp_send_community
    - include: router_bgp_send_extended_community
    - include: router_bgp_route_reflector_client
    - include: router_bgp_remove_private_as

  router_bgp_af_group_ipv4_unicast:
    - match: |
        (?xi)
        ^\s*(af-group)\s+(\S+)\s+(address-family)\s*(ipv4)\s+(unicast)$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
        3: support.constant
        4: constant.character
        5: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.group.ipv4.unicast
      - include: router_bgp_af_group_settings
      - include: router_bgp_af_group_ipv4_settings
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_af_group_ipv4_multicast:
    - match: |
        (?xi)
        ^\s*(af-group)\s+(\S+)\s+(address-family)\s*(ipv4)\s+(multicast)$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
        3: support.constant
        4: constant.character
        5: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.group.ipv4.multicast
      - include: router_bgp_af_group_settings
      - include: router_bgp_af_group_ipv4_settings
      - match: '{{ctx_pop_router_bgp}}'
        pop: true


  router_bgp_route_policy:
    - match: |
        (?xi)
        ^\s*(route-policy)\s+(\S+)
        (?:
          (\()
          (?:\s*(\S+))(?:\s*(,)\s*(\S+)){1,15}
          (\))
          \s+
        )?
        (
          (?:in)|
          (?:out)
        )\s*$
      captures:
        1: support.constant
        2: string.unquoted
        3: comment
        4: constant.language
        5: comment
        6: constant.language
        7: comment
        8: support.constant

  router_bgp_soft_reconfiguration_inbound:
    - match: |
        (?xi)
        ^\s*(soft-reconfiguration)\s+(inbound)\s+
        (
          (?:always)|
          (?:inheritance-disable)
        )\s*$
      captures:
        1: support.constant
        2: support.constant
        3: support.constant

  router_bgp_additional_paths:
    - match: |
        (?xi)
        ^\s*(additional-paths)\s+(selection)\s+
        (?:
          (?:(route-policy)\s+(\S+))|
          (?:(disable))
        )
      captures:
        1: support.constant
        2: constant.language
        3: support.constant
        4: string.unquoted
        5: keyword.other

    - match: |
        (?xi)
        ^\s*(additional-paths)\s+
        (
          (?:receive)|
          (?:send)|
        )
        \s+(disable)?\s*$
      captures:
        1: support.constant
        2: constant.language
        3: keyword.other

  router_bgp_network_ipv4:
    - match: |
        (?xi)
        ^\s*(network)\s+({{ip_prefix}})
        (?:\s+(route-policy)\s+(\S+))?\s*$
      captures:
        1: support.constant
        2: constant.numeric.ip.ipv4.prefix
        3: support.constant
        4: string.unquoted

  router_bgp_network_ipv6:
    - match: |
        (?xi)
        ^\s*(network)\s+({{ipv6_prefix}})
        (?:\s+(route-policy)\s+(\S+))?\s*$
      captures:
        1: support.constant
        2: constant.numeric.ip.ipv6.prefix
        3: support.constant
        4: string.unquoted

  router_bgp_af_group_ipv4_labeled_unicast:
    - match: |
        (?xi)
        ^\s*(af-group)\s+(\S+)\s+(address-family)\s*(ipv4)\s+(labeled-unicast)$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
        3: support.constant
        4: constant.character
        5: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.group.ipv4.labeled_unicast
      - include: router_bgp_af_group_settings
      - include: router_bgp_af_group_ipv4_settings
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_af_group_ipv4_tunnel:
    - match: |
        (?xi)
        ^\s*(af-group)\s+(\S+)\s+(address-family)\s*(ipv4)\s+(tunnel)$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
        3: support.constant
        4: constant.character
        5: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.group.ipv4.tunnel
      - include: router_bgp_af_group_settings
      - include: router_bgp_af_group_ipv4_settings
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_af_group_vpnv4_unicast:
    - match: |
        (?xi)
        ^\s*(af-group)\s+(\S+)\s+(address-family)\s*(vpnv4)\s+(unicast)$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
        3: support.constant
        4: constant.character
        5: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.group.vpnv4.unicast
      - include: router_bgp_af_group_settings
      - include: router_bgp_af_group_ipv4_settings
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_af_group_ipv6_unicast:
    - match: |
        (?xi)
        ^\s*(af-group)\s+(\S+)\s+(address-family)\s*(ipv6)\s+(unicast)$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
        3: support.constant
        4: constant.character
        5: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.group.ipv6.unicast
      - include: router_bgp_af_group_settings
      - include: router_bgp_af_group_ipv6_settings
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_address_family_ipv4_unicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+
        (
          (?:unicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.ipv4.unicast
      - include: router_bgp_address_family_settings
      - include: router_bgp_address_family_ipv4_settings
      - include: router_bgp_redistribute_ospf
      - include: router_bgp_redistribute_eigrp
      - include: router_bgp_maximum_prefix
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_address_family_ipv4_multicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+
        (
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.ipv4.multicast
      - include: router_bgp_address_family_settings
      - include: router_bgp_address_family_ipv4_settings
      - include: router_bgp_redistribute_ospf
      - include: router_bgp_redistribute_eigrp
      - include: router_bgp_maximum_prefix
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_address_family_ipv4:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+
        (
          (?:labeled-unicast)|
          (?:flowspec)|
          (?:mvpn)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.ipv4
      - include: router_bgp_address_family_settings
      - include: router_bgp_address_family_ipv4_settings
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_neighbor_address_family_ipv4_unicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+(unicast)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor.address_family.ipv4.unicast
      - include: router_bgp_neighbor_address_family_settings
      - include: router_bgp_neighbor_address_family_ipv4_settings
      - match: '{{ctx_pop_router_bgp_neighbor}}'
        pop: true

  router_bgp_neighbor_address_family_ipv4_multicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+(multicast)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor.address_family.ipv4.multicast
      - include: router_bgp_neighbor_address_family_settings
      - include: router_bgp_neighbor_address_family_ipv4_settings
      - match: '{{ctx_pop_router_bgp_neighbor}}'
        pop: true

  router_bgp_neighbor_address_family_vpnv4:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(vpnv4)\s+
        (
          (?:unicast)|
          (?:multicast)|
          (?:flowspec)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor.address_family.vpnv4
      - include: router_bgp_neighbor_address_family_settings
      - include: router_bgp_neighbor_address_family_ipv4_settings
      - match: '{{ctx_pop_router_bgp_neighbor}}'
        pop: true

  router_bgp_neighbor_address_family_ipv6_unicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:unicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor.address_family.ipv6.unicast
      - include: router_bgp_neighbor_address_family_settings
      - include: router_bgp_neighbor_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_neighbor}}'
        pop: true

  router_bgp_neighbor_address_family_ipv6_multicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor.address_family.ipv6.multicast
      - include: router_bgp_neighbor_address_family_settings
      - include: router_bgp_neighbor_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_neighbor}}'
        pop: true

  router_bgp_neighbor_address_family_ipv6_mvpn:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+(mvpn)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor.address_family.ipv6.mvpn
      - include: router_bgp_neighbor_address_family_settings
      - include: router_bgp_neighbor_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_neighbor}}'
        pop: true

  router_bgp_neighbor_address_family_ipv6_flowspec:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+(flowspec)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor.address_family.ipv6.flowspec
      - include: router_bgp_neighbor_address_family_settings
      - include: router_bgp_neighbor_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_neighbor}}'
        pop: true

  router_bgp_neighbor_group_address_family_ipv4_unicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+(unicast)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor_group.address_family.ipv4.unicast
      - include: router_bgp_neighbor_group_address_family_settings
      - include: router_bgp_neighbor_group_address_family_ipv4_settings
      - match: '{{ctx_pop_router_bgp_neighbor_group}}'
        pop: true

  router_bgp_neighbor_group_address_family_ipv4_multicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+(multicast)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor_group.address_family.ipv4.multicast
      - include: router_bgp_neighbor_group_address_family_settings
      - include: router_bgp_neighbor_group_address_family_ipv4_settings
      - match: '{{ctx_pop_router_bgp_neighbor_group}}'
        pop: true

  router_bgp_neighbor_group_address_family_vpnv4:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(vpnv4)\s+
        (
          (?:unicast)|
          (?:multicast)|
          (?:flowspec)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor_group.address_family.vpnv4
      - include: router_bgp_neighbor_group_address_family_settings
      - include: router_bgp_neighbor_group_address_family_ipv4_settings
      - match: '{{ctx_pop_router_bgp_neighbor_group}}'
        pop: true

  router_bgp_neighbor_group_address_family_ipv6_unicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:unicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor_group.address_family.ipv6.unicast
      - include: router_bgp_neighbor_group_address_family_settings
      - include: router_bgp_neighbor_group_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_neighbor_group}}'
        pop: true

  router_bgp_neighbor_group_address_family_ipv6_multicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor_group.address_family.ipv6.multicast
      - include: router_bgp_neighbor_group_address_family_settings
      - include: router_bgp_neighbor_group_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_neighbor_group}}'
        pop: true

  router_bgp_neighbor_group_address_family_ipv6_mvpn:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+(mvpn)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor_group.address_family.ipv6.mvpn
      - include: router_bgp_neighbor_group_address_family_settings
      - include: router_bgp_neighbor_group_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_neighbor_group}}'
        pop: true

  router_bgp_neighbor_group_address_family_ipv6_flowspec:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+(flowspec)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.neighbor_group.address_family.ipv6.flowspec
      - include: router_bgp_neighbor_group_address_family_settings
      - include: router_bgp_neighbor_group_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_neighbor_group}}'
        pop: true

  router_bgp_vrf_address_family_ipv4_unicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+
        (
          (?:unicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.vrf.address_family.ipv4.unicast
      - include: router_bgp_vrf_address_family_settings
      - include: router_bgp_vrf_address_family_ipv4_settings
      - include: router_bgp_redistribute_ospf
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_vrf}}'
        pop: true

  router_bgp_vrf_address_family_ipv4_multicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+
        (
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.vrf.address_family.ipv4.multicast
      - include: router_bgp_vrf_address_family_settings
      - include: router_bgp_vrf_address_family_ipv4_settings
      - include: router_bgp_redistribute_ospf
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_vrf}}'
        pop: true

  router_bgp_vrf_address_family_ipv4:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+
        (
          (?:labeled-unicast)|
          (?:flowspec)|
          (?:mvpn)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.vrf.address_family.ipv4
      - include: router_bgp_vrf_address_family_settings
      - include: router_bgp_vrf_address_family_ipv4_settings
      - match: '{{ctx_pop_router_bgp_vrf}}'
        pop: true

  router_bgp_address_family_vpnv4:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(vpnv4)\s+
        (
          (?:unicast)|
          (?:multicast)|
          (?:flowspec)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.vpnv4
      - include: router_bgp_vrf_address_family_settings
      - include: router_bgp_vrf_address_family_ipv4_settings
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_address_family_ipv6_unicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:unicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.ipv6.unicast
      - include: router_bgp_vrf_address_family_settings
      - include: router_bgp_vrf_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_address_family_ipv6_multicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.ipv6.multicast
      - include: router_bgp_vrf_address_family_settings
      - include: router_bgp_vrf_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_address_family_ipv6:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:flowspec)|
          (?:mvpn)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.ipv6
      - include: router_bgp_vrf_address_family_settings
      - include: router_bgp_vrf_address_family_ipv6_settings
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_vrf_address_family_ipv6_unicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:unicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.vrf.address_family.ipv6.unicast
      - include: router_bgp_vrf_address_family_settings
      - include: router_bgp_vrf_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_vrf}}'
        pop: true

  router_bgp_vrf_address_family_ipv6_multicast:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.vrf.address_family.ipv6.multicast
      - include: router_bgp_vrf_address_family_settings
      - include: router_bgp_vrf_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_vrf}}'
        pop: true

  router_bgp_vrf_address_family_ipv6:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:flowspec)|
          (?:mvpn)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.vrf.address_family.ipv6
      - include: router_bgp_vrf_address_family_settings
      - include: router_bgp_vrf_address_family_ipv6_settings
      - include: router_bgp_redistribute_eigrp
      - match: '{{ctx_pop_router_bgp_vrf}}'
        pop: true

  router_bgp_address_family_vpnv6:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(vpnv6)\s+
        (
          (?:unicast)|
          (?:flowspec)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.vpnv6
      - include: router_bgp_address_family_settings
      - include: router_bgp_address_family_ipv6_settings
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_address_family_l2vpn_vpls_vpws:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(l2vpn)\s+(vpls-vpws)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.l2vpn_vpls_vpws
      - include: router_bgp_address_family_settings
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_address_family_link_state:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(link-state)\s+(link-state)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.bgp.address_family.link_state
      - include: router_bgp_address_family_settings
      - match: '{{ctx_pop_router_bgp}}'
        pop: true

  router_bgp_neighbor_group:
    - match: |
        (?xi)
        ^\s*(neighbor-group)\s+(\S+)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.bgp.neighbor.group
        - include: router_bgp_neighbor_group_address_family
        - include: router_bgp_neighbor_group_setting
        - include: router_bgp_ebgp_multihop
        - include: router_bgp_ignore_connected_check
        - match: '{{ctx_pop_router_bgp}}'
          pop: true

  router_bgp_neighbor_ipv4:
    - match: |
        (?xi)
        ^\s*(neighbor)\s+({{ip}})\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.numeric.ip.ipv4.address
      push:
        - meta_content_scope: text.network.cisco.bgp.neighbor.ipv4
        - include: router_bgp_neighbor_setting
        - include: router_bgp_neighbor_address_family_ipv4
        - include: router_bgp_ebgp_multihop
        - include: router_bgp_ignore_connected_check
        - match: '{{ctx_pop_router_bgp}}'
          pop: true

  router_bgp_neighbor_ipv6:
    - match: |
        (?xi)
        ^\s*(neighbor)\s+({{ipv6}})\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.numeric.ip.ipv6.address
      push:
        - meta_content_scope: text.network.cisco.bgp.neighbor.ipv6
        - include: router_bgp_neighbor_setting
        - include: router_bgp_neighbor_address_family_ipv6
        - include: router_bgp_ebgp_multihop
        - include: router_bgp_ignore_connected_check
        - match: '{{ctx_pop_router_bgp}}'
          pop: true

  router_bgp_vrf_neighbor_ipv4:
    - match: |
        (?xi)
        ^\s*(neighbor)\s+({{ip}})\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.numeric.ip.ipv4.address
      push:
        - meta_content_scope: text.network.cisco.bgp.vrf.neighbor.ipv4
        - include: router_bgp_vrf_neighbor_setting
        - match: '{{ctx_pop_router_bgp_vrf}}'
          pop: true

  router_bgp_vrf_neighbor_ipv6:
    - match: |
        (?xi)
        ^\s*(neighbor)\s+({{ipv6}})\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.numeric.ip.ipv6.address
      push:
        - meta_content_scope: text.network.cisco.bgp.vrf.neighbor.ipv6
        - include: router_bgp_vrf_neighbor_setting
        - match: '{{ctx_pop_router_bgp_vrf}}'
          pop: true

  router_bgp_session_group:
    - match: |
        (?xi)
        ^\s*(session-group)\s+(\S+)\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.bgp.session_group
        - include: router_bgp_remote_as
        - include: router_bgp_update_source
        - match: '{{ctx_pop_router_bgp}}'
          pop: true

  router_bgp_neighbor_group_setting:
    - include: router_bgp_use_neighbor_group
    - include: router_bgp_use_af_group
    - include: router_bgp_use_session_group
    - include: router_bgp_remote_as
    - include: router_bgp_update_source
    - include: router_bgp_password
    - include: description

  router_bgp_neighbor_setting:
    - include: router_bgp_use_af_group
    - include: router_bgp_use_session_group
    - include: router_bgp_use_neighbor_group
    - include: router_bgp_remote_as
    - include: router_bgp_update_source
    - include: router_bgp_password
    - include: description

  router_bgp_vrf_neighbor_setting:
    - include: router_bgp_use_neighbor_group
    - include: router_bgp_remote_as
    - include: router_bgp_update_source
    - include: router_bgp_ebgp_multihop
    - include: router_bgp_ignore_connected_check
    - include: router_bgp_password
    - include: description

  router_bgp_use_neighbor_group:
    - match: |
        (?xi)
        ^\s*(use)\s+(neighbor-group)\s+(\S+)\s*$
      captures:
        1: support.constant
        2: support.constant
        3: string.unquoted

  router_bgp_use_af_group:
    - match: |
        (?xi)
        ^\s*(use)\s+(af-group)\s+(\S+)\s*$
      captures:
        1: support.constant
        2: support.constant
        3: string.unquoted

  router_bgp_use_session_group:
    - match: |
        (?xi)
        ^\s*(use)\s+(session-group)\s+(\S+)\s*$
      captures:
        1: support.constant
        2: support.constant
        3: string.unquoted

  router_bgp_ebgp_multihop:
    - match: |
        (?xi)
        ^\s*(ebgp-multihop)(?:\s+({{number_8_bit}}))?(?:\s+(mpls))?
        \s*$
      captures:
        1: support.constant
        2: constant.numeric
        3: support.constant

  router_bgp_maximum_prefix:
    - match: |
        (?xi)
        ^\s*
        (maximum-prefix)\s+({{number_32_bit_wo_zero}})
        (?:\s+({{number_range_1_100}}))?
        (?:\s+(discard-extra-paths))?
        (?:\s+(warning-only))?
        (?:\s+(restart)\s+({{number_16_bit_wo_zero}}))?
        \s*$
      captures:
        1: support.constant
        2: constant.numeric
        3: constant.numeric
        4: support.constant
        5: support.constant
        6: support.constant
        7: constant.numeric

  ntp:
  - match: |
      (?xi)
        ^\s*
        (ntp)\s+
        (?:
          (?:(source)\s+({{interface_names}})\s*({{interface_numbers}}))|
          (?:(clock-period)\s+(\d+))|
          (?:(server)\s+({{ip}}))
        )
    captures:
      1: support.constant                  # ntp
      2: support.constant                  # ntp source
      3: entity.other.attribute-name       # ntp source interface type
      4: constant.numeric                  # ntp source interface number
      5: support.constant                  # ntp clock-period
      6: constant.numeric                  # ntp clock-period value
      7: support.constant                  # ntp server
      8: constant.numeric.ip.ipv4.address  # ntp server ip

  interface_bvi:
    - match: |
        (?xi)
        ^\s*
        (interface)\s+(bvi)\s+({{number_16_bit_wo_zero}})\s*$
      captures:
        1: support.constant
        2: support.constant
        3: constant.language

  ssh_server:
    - include: ssh_server_v2
    - include: ssh_server_vrf
    - include: ssh_server_logging
    - include: ssh_server_session_limit

  ssh_server_v2:
    - match: |
        (?xi)
        ^\s*
        (ssh)\s+(server)\s+(v2)\s*$
      captures:
        1: support.constant
        2: support.constant
        3: constant.language

  ssh_server_session_limit:
    - match: |
        (?xi)
        ^\s*
        (ssh)\s+(server)\s+(session-limit)\s+({{number_range_1_1024}})\s*$
      captures:
        1: support.constant
        2: support.constant
        3: constant.language
        4: constant.numeric

  ssh_server_vrf:
    - match: |
        (?xi)
        ^\s*
        (ssh)\s+(server)\s+(vrf)\s+({{vrf_name}})\s*$
      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: string.unquoted

  ssh_server_logging:
    - match: |
        (?xi)
        ^\s*
        (ssh)\s+(server)\s+(logging)\s*$
      captures:
        1: support.constant
        2: support.constant
        3: support.constant

  ipv6_prefix_list:
    - match: |
        (?xi)
        ^\s*(ipv6)\s+(prefix-list)\s+(\S+)\s+
        (?:(seq)\s+(\d+)\s+)?
        (?:(permit)|(deny))\s+
        ({{ipv6_prefix}})
        (?:
          \s+({{operators}})\s+({{ipv6_prefix_length}})
          (?:\s+({{operators}})\s+({{ipv6_prefix_length}}))?
        )?
      captures:
        1: support.constant                              # IP
        2: support.constant                              # Prefix list
        3: string.unquoted                               # Name
        4: support.constant                              # sequence
        5: constant.numeric                              # sequence number
        6: entity.other.attribute-name                   # permit
        7: keyword.other                                 # deny
        8: constant.numeric.ip.ipv6.prefix               # prefix
        9: support.constant                              # operator
        10: constant.numeric.network.ipv6.prefix_length  # prefix
        11: support.constant                             # operator
        12: constant.numeric.network.ipv6.prefix_length  # prefix


  interface_management:
    - match: |
        (?xi)
        ^\s*
        (?:
          (interface)\s+
          (?:
            (?:(mgmteth)\s*(\d+/\d+/CPU\d+/\d+))
          )
        )
      captures:
        0: cisco.scope
        1: variable.parameter              # interface
        2: entity.other.attribute-name     # interface MgmtEth
        3: constant.numeric                # interface MgmtEth 0/0/CPU0/0
      push:
      - meta_content_scope: text.network.cisco.interface.management
      - include: interface_setting_base
      - include: pop_on_configure_terminal_context

  rpl_set_definition:
    - include: community_set
    - include: extcommunity_rt_set
    - include: extcommunity_soo_set
    - include: extcommunity_cost_set
    - include: prefix_set
    - include: tag_set
    - include: ospf_area_set
    - include: rd_set
    - include: as_path_set

  extcommunity_rt_set:
    - match: |
        (?xi)
        ^\s*
        (?:
          (extcommunity-set)\s+(rt)\s+({{rpl_set_name}})
        )
      captures:
        0: cisco.scope
        1: variable.parameter             # extcommunity-set
        2: constant.character               # extcommunity-set rt
        3: string.unquoted                # extcommunity-set rt NAME
      push:
      - meta_content_scope: text.network.cisco.set.extcommunity.rt
      - include: rpl_route_target
      - include: ios_regex
      - include: dfa_regex
      - match: (?<=\S)\s*,\s*$
        captures:
          0: comment
      # - match: |
      #     (?xi)
      #     ^\s*
      #     (
      #       (?:{{route_target}})|
      #       (?:{{number_32_bit}})
      #     )
      #     (,)?
      #   captures:
      #     1: constant.numeric
      #     2: support.constant
      - include: set_prototype
      - match: '{{ctx_pop_configure_terminal}}'
        pop: true

  extcommunity_cost_set:
    - match: |
        (?xi)
        ^\s*
        (?:
          (extcommunity-set)\s+(cost)\s+({{rpl_set_name}})
        )
      captures:
        0: cisco.scope
        1: variable.parameter             # extcommunity-set
        2: constant.character               # extcommunity-set cost
        3: string.unquoted                # extcommunity-set cost NAME
      push:
      - meta_content_scope: text.network.cisco.set.extcommunity_cost
      - match: |
          (?xi)
          ^\s*
          (?:
            (?:
              (?:(\d+)\s+)?
              (
                (?:igp)|
                (?:pre-bestpath)
              )
              (:)(\d+)(:)(\d+)
            )
            (,)?
          )
        captures:
          1: constant.numeric
          2: support.constant
          3: constant.numeric
          4: constant.numeric
          5: constant.numeric
          6: constant.numeric
          7: support.constant
      - include: set_prototype
      - match: '{{ctx_pop_configure_terminal}}'
        pop: true

  extcommunity_soo_set:
    - match: |
        (?xi)
        ^\s*
        (?:
          (extcommunity-set)\s+(soo)\s+({{rpl_set_name}})
        )
      captures:
        0: cisco.scope
        1: variable.parameter             # extcommunity-set
        2: constant.character               # extcommunity-set soo
        3: string.unquoted                # extcommunity-set soo NAME
      push:
      - meta_content_scope: text.network.cisco.set.extcommunity_soo
      - match: |
          (?xi)
          ^\s*
          (
            (?:{{route_target}})|
            (?:{{number_32_bit}})
          )
          (,)?
        captures:
          1: constant.numeric
          2: support.constant
      - include: set_prototype
      - match: '{{ctx_pop_configure_terminal}}'
        pop: true

  rpl_prefix:
    - meta_content_scope: text.network.cisco.rpl.set.prefix
    - match: |
        (?xi)
        \s*
        (?:
          (?:
            ({{ip_prefix}})
            (?:
              \s+
              (
                (?:eq)|
                (?:ge)|
                (?:gt)|
                (?:lt)|
                (?:le)
              )
              \s+
              ({{ipv4_prefix_length}})
              (?:
                \s+
                (
                  (?:eq)|
                  (?:ge)|
                  (?:gt)|
                  (?:lt)|
                  (?:le)
                )
                \s+
                ({{ipv4_prefix_length}})
              )?
            )?
          )|
          (?:
            ({{ipv6_prefix}})
            (?:
              \s+
              (
                (?:eq)|
                (?:ge)|
                (?:gt)|
                (?:lt)|
                (?:le)
              )
              \s+
              ({{ipv6_prefix_length}})
              (?:
                \s+
                (
                  (?:eq)|
                  (?:ge)|
                  (?:gt)|
                  (?:lt)|
                  (?:le)
                )
                \s+
                ({{ipv6_prefix_length}})
              )?
            )?
          )|
          (?:
            ({{ipv6}})
          )
        )
      captures:
        1: constant.numeric.ip.ipv4.prefix
        2: keyword.control.conditional
        3: constant.numeric.network.ipv4.prefix_length
        4: keyword.control.conditional
        5: constant.numeric.network.ipv4.prefix_length
        6: constant.numeric.ip.ipv6.prefix
        7: keyword.control.conditional
        8: constant.numeric.network.ipv4.prefix_length
        9: keyword.control.conditional
        10: constant.numeric.network.ipv4.prefix_length
        11: constant.numeric.ip.ipv6.address

  rpl_protocol:
    - meta_content_scope: text.network.cisco.rpl.protocol
    - match: |
        (?xi)
        (?:
          \b
          (
            (?:bgp)|
            (?:connected)|
            (?:eigrp)|
            (?:isis)|
            (?:ospfv3)|
            (?:ospf)|
            (?:rip)|
            (?:static)
          )
          \b
        )
      captures:
        1: constant.character

  rpl_autonomous_system_wo_wildcard:
    - meta_content_scope: text.network.cisco.rpl.set.as
    - match: |
        (?xi)
        (?:
          \b
          (?:
              ({{number_16_bit_wo_zero}}\.{{number_16_bit}})|
              ({{number_32_bit}})
          )
          \b
        )
      captures:
        1: constant.numeric.as
        2: constant.numeric.as

  rpl_ospf_area_id:
    - meta_content_scope: text.network.cisco.rpl.ospf.area
    - match: |
        (?xi)
        \s*
        (?:
          \b
          (?:
            ({{ip}})|
            ({{number_32_bit}})
          )
          \b
        )
      captures:
        1: constant.numeric.ip.ipv4.address
        2: constant.numeric

  prefix_set:
    - match: |
        (?xi)
        ^\s*
        (?:
          (prefix-set)\s+({{rpl_set_name}})
        )
      captures:
        0: cisco.scope
        1: variable.parameter             # prefix-set
        2: string.unquoted                # prefix-set NAME
      push:
      - meta_content_scope: text.network.cisco.set.prefix
      - include: rpl_prefix
      - include: set_prototype
      - match: '{{ctx_pop_configure_terminal}}'
        pop: true

  tag_set:
    - match: |
        (?xi)
        ^\s*
        (?:
          (tag-set)\s+({{rpl_set_name}})
        )
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.set.tag
      - include: rpl_tag
      - include: set_prototype
      - match: '{{ctx_pop_configure_terminal}}'
        pop: true

  ospf_area_set:
    - match: |
        (?xi)
        ^\s*
        (?:
          (ospf-area-set)\s+({{rpl_set_name}})
        )
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.set.ospf_area
      - include: rpl_ospf_area_id
      - include: set_prototype
      - match: '{{ctx_pop_configure_terminal}}'
        pop: true

  policy_global:
    - match: |
        (?xi)
        ^\s*
        (?:
          (policy-global)
        )
      captures:
        0: cisco.scope
        1: variable.parameter
      push:
      - meta_content_scope: text.network.cisco.policy.global
      - include: policy_global_key_value
      - match: |
          (?xi)
          \s*
          (
            (?:end-global)
          )
        captures:
          0: comment
        pop: true
      - match: '{{ctx_pop_configure_terminal}}'
        pop: true

  policy_global_key_value:
      - match: |
          (?xi)
          \s*
          ({{rpl_parameter_name}})
          \s+
          (')
          (?:
            (\d+)|
            ([^']*)
          )
          (')
        captures:
          1: entity.other.attribute-name.rpl
          2: string.quoted.single
          3: constant.numeric
          4: string
          5: string.quoted.single

  as_path_set:
    - match: |
        (?xi)
        ^\s*
        (?:
          (as-path-set)\s+({{rpl_set_name}})
        )
      captures:
        0: cisco.scope
        1: variable.parameter             # as-path-set
        2: string.unquoted                # as-path-set NAME
      push:
      - meta_content_scope: text.network.cisco.as_path_set
      - match: |
          (?xi)
          ^\s*
          (?:
            (?:({{ip_prefix}})\s+({{operators}})\s+({{ipv4_prefix_length}}))
          )
          (,)?
        captures:
          1: constant.numeric
          2: support.constant
          3: constant.numeric
          4: support.constant
      - include: ios_regex
      - include: dfa_regex
      - include: set_prototype
      - match: '{{ctx_pop_configure_terminal}}'
        pop: true

  ios_regex:
    - match: |
        (?xi)
        \s*
        (?:
          (?:(ios-regex)\s+(')(?=[^']*(')))
        )
      captures:
        1: support.constant
        2: string.quoted.single
      push:
      - meta_scope: text.network.cisco.regular_expression
      - match: |
          (?xi)
          (?:
            (\\{{ios_regex_special_characters}})|
            (\\\')|
            ({{ios_regex_special_characters}})|
            (
              \[[^\]]*\]
            )|
            ([^'])
          )
        captures:
          1: constant.character.escape
          2: constant.character.escape
          3: keyword.operator.quantifier.regexp.cisco.ios
          4: constant.other.character-class.set.regexp.cisco.ios
          5: string.regexp
      - match: |
          (?xi)
          '
        pop: true
        captures:
          0: string.quoted.single

  dfa_regex:
    - match: |
        (?xi)
        \s*
        (?:
          (?:(dfa-regex)\s+(')(?=[^']*(')))
        )
      captures:
        1: support.constant
        2: string.quoted.single
      push:
      - meta_scope: text.network.dfa.regular_expression
      - match: |
          (?xi)
          (?:
            (\\{{ios_regex_special_characters}})|
            ({{ios_regex_special_characters}})|
            (
              \[[^\]]*\]
            )|
            ([^'])
          )
        captures:
          1: constant.character.escape
          2: keyword.operator.quantifier.regexp.cisco.ios
          3: constant.other.character-class.set.regexp.cisco.ios
          4: string.regexp
      - match: |
          (?xi)
          '
        pop: true
        captures:
          0: string.quoted.single

  rd_set:
    - match: |
        (?xi)
        ^\s*
        (?:
          (rd-set)\s+({{rpl_set_name}})
        )
      captures:
        0: cisco.scope
        1: variable.parameter             # prefix-set
        2: string.unquoted                # prefix-set NAME
      push:
      - meta_content_scope: text.network.cisco.rd_set
      - include: rpl_rd
      - match: '\s*,\s*'
        captures:
          0: comment
      - include: set_prototype
      - match: '{{ctx_pop_configure_terminal}}'
        pop: true

  rpl_rd:
    - match: |
        (?xi)
        \s*
        (?:
          (?:({{ip_prefix}}:)(\*))|
          (?:({{ip_prefix}}:{{number_32_bit}}))|
          (?:({{ip}}:)(\*))|
          (?:({{ip}}:{{number_16_bit_wo_zero}}))|
          (?:({{number_16_bit_wo_zero}}:)(\*))|
          (?:({{number_16_bit_wo_zero}}:{{number_32_bit}}))|
          (?:({{number_16_bit_wo_zero}}\.{{number_16_bit_wo_zero}}:)(\*))|
          (?:({{number_16_bit_wo_zero}}\.{{number_16_bit_wo_zero}}:{{number_16_bit_wo_zero}}))
        )
      captures:
        1: constant.numeric
        2: keyword
        3: constant.numeric
        4: constant.numeric
        5: keyword
        6: constant.numeric
        7: constant.numeric
        8: keyword
        9: constant.numeric
        10: constant.numeric
        11: keyword
        12: constant.numeric

  community_set:
    - match: |
        (?xi)
        ^\s*
        (?:
          (community-set)\s+({{rpl_set_name}})
        )
      captures:
        0: cisco.scope
        1: variable.parameter             # set
        2: string.unquoted                # set NAME
      push:
        # - include: rpl_set_community_entry
        - meta_content_scope: text.network.cisco.set.community
        - include: ios_regex
        - include: dfa_regex
        - include: rpl_community
        - match: '\s*,\s*'
          captures:
            0: comment
        - include: set_prototype
        - match: '{{ctx_pop_configure_terminal}}'
          pop: true

  rpl_extended_community:
    - match: |
        (?xi)
        (?:
          (
            (?:{{number_32_bit}}:{{number_16_bit_wo_zero}})|
            (?:{{number_16_bit_wo_zero}}:{{number_32_bit}})|
            (?:{{ip_prefix}}:{{number_16_bit_wo_zero}})|
            (?:{{ip}}:{{number_16_bit_wo_zero}})
          )|
          (?:
            (?:
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
            (:)
            (?:
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
          )|
          (?:({{number_32_bit}}:)
            (?:
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
          )|
          (?:
            (?:
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
            (:{{number_32_bit}})
          )|
          (?:
            ({{ip_prefix}})(:)
            (?:
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
          )|
          (?:
            ({{ip}}:)
            (?:
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
          )|
          (?:
            (?:
              ({{number_16_bit_wo_zero}})|
              (?:
                (\*)|
                (?:(\$)({{rpl_parameter_name}}))
              )
            )
            (\.)
            (?:
              ({{number_16_bit_wo_zero}})|
              (?:
                (\*)|
                (?:(\$)({{rpl_parameter_name}}))
              )
            )
            (:)
            (?:
              ({{number_16_bit_wo_zero}})|
              (?:
                (\*)|
                (?:(\$)({{rpl_parameter_name}}))
              )
            )
          )
        )
      captures:
        1: constant.numeric.route.target
        2: keyword.control
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric
        6: keyword.control
        7: keyword.declaration.rpl
        8: entity.other.attribute-name.rpl
        9: constant.numeric
        10: keyword.control
        11: keyword.declaration.rpl
        12: entity.other.attribute-name.rpl
        13: keyword.control
        14: keyword.declaration.rpl
        15: entity.other.attribute-name.rpl
        16: constant.numeric
        17: constant.numeric
        18: constant.numeric
        19: keyword.control
        20: keyword.declaration.rpl
        21: entity.other.attribute-name.rpl
        22: constant.numeric
        23: keyword.control
        24: keyword.declaration.rpl
        25: entity.other.attribute-name.rpl
        26: constant.numeric
        27: keyword.control
        28: keyword.declaration.rpl
        29: entity.other.attribute-name.rpl
        30: constant.numeric
        31: constant.numeric
        32: keyword.control
        33: keyword.declaration.rpl
        34: entity.other.attribute-name.rpl
        35: constant.numeric
        36: constant.numeric
        37: keyword.control
        38: keyword.declaration.rpl
        39: entity.other.attribute-name.rpl

  rpl_community:
    - match: |
        (?xi)
        \s*
        (?:
          (?:
            (?:
              (?:
                (\[)
                ({{number_16_bit_wo_zero}})
                (\.\.)
                ({{number_16_bit_wo_zero}})
                (\])
              )|
              ({{number_16_bit_wo_zero}})|
              (peeras)|
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
            (:)
            (?:
              (?:
                (\[)
                ({{number_16_bit}})
                (\.\.)
                ({{number_16_bit}})
                (\])
              )|
              ({{number_16_bit}})|
              (peeras)|
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
          )|
          (
            (?:accept-own)|
            (?:internet)|
            (?:no-export)|
            (?:no-advertise)|
            (?:private-as)|
            (?:local-as)|
            (?:accept-own)
          )
        )
      captures:
        1: keyword
        2: constant.numeric
        3: constant.character
        4: constant.numeric
        5: keyword
        6: constant.numeric
        7: constant.character
        8: keyword.control
        9: keyword.declaration.rpl
        10: entity.other.attribute-name.rpl
        11: constant.character
        12: keyword
        13: constant.numeric
        14: constant.character
        15: constant.numeric
        16: keyword
        17: constant.numeric
        18: constant.character
        19: keyword.control
        20: keyword.declaration.rpl
        21: entity.other.attribute-name.rpl
        22: constant.numeric
        23: constant.character

  rpl_community_wo_wildcard_or_range:
    - match: |
        (?xi)
        \s*
        (?:
          (?:
            (?:
              ({{number_16_bit_wo_zero}})|
              (?:(\$)({{rpl_parameter_name}}))
            )
            (:)
            (?:
              ({{number_16_bit}})|
              (?:(\$)({{rpl_parameter_name}}))
            )
          )|
          (
            (?:accept-own)|
            (?:internet)|
            (?:no-export)|
            (?:no-advertise)|
            (?:private-as)|
            (?:local-as)|
            (?:accept-own)
          )
        )
      captures:
        1: constant.numeric
        2: keyword.declaration.rpl
        3: entity.other.attribute-name.rpl
        4: constant.character
        5: constant.numeric
        6: keyword.declaration.rpl
        7: entity.other.attribute-name.rpl
        8: constant.numeric
        9: constant.character

  set_prototype:
    - match: |
        (?xi)
        ^\s*(show)\s*$
      captures:
        1: support.constant
    - match: |
        (?xi)
        ^\s*
        (?:
          (end-set)|
          (abort)|
          (exit)
        )
      captures:
        1: comment.line
        2: comment.line
        3: comment.line
      pop: true

  rpl_editor:
    - match: |
        (?xi)
        ^\s*
        (rpl)\s+(editor)\s+
        (
          (?:nano)|
          (?:emacs)|
          (?:vim)
        )
      captures:
        1: support.constant
        2: support.constant
        3: constant.language

  rpl_set_exit_as_abort:
    - match: |
        (?xi)
        ^\s*
        (rpl)\s+(set-exit-as-abort)
      captures:
        0: support.constant

  rpl_maximum:
    - match: |
        (?xi)
        ^\s*
        (rpl)\s+(maximum)\s+
        (?:
          (?:
            (lines)\s+
            \b
            (
              (?:13107[0-2])|
              (?:1310[0-6]\d)|
              (?:130\d{3})|
              (?:1[1-2]\d{4})|
              (?:\d{1,5})
            )
            \b
          )|
          (?:(policies)\s+
            \b
            (
              (?:5000)|
              (?:[0-4]\d{3})|
              (?:\d{1,3})
            )
            \b
          )
        )
      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: constant.numeric
        5: support.constant
        6: constant.numeric

  route_policy:
    - match: |
        (?xi)
        ^\s*
        (route-policy)\s+([\w-\.]+)
        (?:
          (?:
            (\()
            (?:
              (?:\s*(\$)({{rpl_parameter_name}})\s*(,))*
              (?:\s*(\$)({{rpl_parameter_name}})\s*)
            )?
            (\))
          )
        )?
        \s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
        3: comment
        4: keyword.declaration.rpl
        5: entity.other.attribute-name.rpl
        6: comment
        7: keyword.declaration.rpl
        8: entity.other.attribute-name.rpl
        9: comment
      push: routing_policy_language

  routing_policy_language:
    - meta_content_scope: text.network.cisco.route_policy
    - include: rpl_statement
    - include: rpl_if
    - match: |
        (?xi)
        ^\s*
        (
          (?:end-policy)|
          (?:abort)|
          (?:exit)
        )
      captures:
        1: comment.line
      pop: true
    - match: |
        (?xi)
        ^\s*
        (?=
          {{ctx_pop_configure_terminal}}
        )
      pop: true


  rpl_statement:
    - match: |
        (?xi)
        ^\s*
        (?:
          (
            (?:pass)|
            (?:done)
          )|
          (?:(drop))
        )
      captures:
        1: entity.other.attribute-name
        2: keyword.control
    - include: rpl_add
    - include: rpl_edit
    - include: rpl_set
    - include: rpl_delete
    - include: rpl_apply
    - include: rpl_var_global
    - include: rpl_prepend_as_path
    - include: rpl_replace_as_path
    - include: rpl_remove_as_path_private_as
    - include: rpl_suppress_route

  rpl_if:
    - match: |
        (?xi)
        ^\s*\b(if)\s+
        (?=
          .*
          \s+
          then
          \s*
          $
        )
      captures:
        1: keyword.control.if
      push:
        - meta_content_scope: text.network.cisco.route_policy.block.if
        - include: rpl_condition_grouping
        - include: rpl_condition_statement_list

  rpl_elseif:
    - match: |
        (?xi)
        ^\s*\b(elseif)\s+
        (?=
          .*
          \s+
          then
          \s*
          $
        )
      captures:
        1: keyword.control.elseif
      set:
        - meta_content_scope: text.network.cisco.route_policy.block.elseif
        - include: rpl_condition_grouping
        - include: rpl_condition_statement_list

  rpl_else:
    - match: |
        (?xi)
        ^\s*(else)\b\s*$
      captures:
        1: keyword.control.else
      set:
        - meta_content_scope: text.network.cisco.route_policy.block.else
        - include: rpl_statement
        - match: |
            (?xi)
            ^\s*(endif)\s*$
          captures:
            1: keyword.operator.endif
          pop: true

  rpl_condition_grouping:
    - match: \(
      scope: punctuation.section.group.begin.rpl
      captures:
        0: comment
      push:
        - meta_scope: meta.group.rpl
        - match: \)
          captures:
            0: comment
          pop: true
        - include: rpl_condition_grouping
        - include: rpl_condition_statement_list

  rpl_condition_statement_list:
    - meta_content_scope: text.network.cisco.route_policy.condition.list
    - match: |
        (?xi)
        \s*\b(not)\b\s+
      captures:
        1: keyword.control
    - match: ''
      set: rpl_condition_statement

  rpl_condition_statement:
    - meta_content_scope: text.network.cisco.route_policy.condition.statement
    - include: rpl_condition_aspath_in
    - include: rpl_condition_protocol
    - include: rpl_condition_rd_in
    - include: rpl_condition_aspath_is_local
    - include: rpl_condition_aspath_length
    - include: rpl_condition_aspath_neighbor_is
    - include: rpl_condition_aspath_originates_from
    - include: rpl_condition_aspath_passes_through
    - include: rpl_condition_aspath_unique_length
    - include: rpl_condition_community_is_empty
    - include: rpl_condition_destination_in
    - include: rpl_condition_extcommunity_rt_constants
    - include: rpl_condition_route_type_is
    - include: rpl_condition_extcommunity_rt_matches_any_every
    - include: rpl_condition_community_matches_any_every
    - include: rpl_condition_global_var_is
    - include: rpl_condition_route_aggregated
    - include: rpl_condition_is_best_path
    - include: rpl_condition_is_backup_path
    - include: rpl_condition_is_multi_path
    - include: rpl_condition_local_preference
    - include: rpl_condition_med
    - include: rpl_condition_next_hop_in
    - include: rpl_condition_rib_has_route
    - include: rpl_condition_source_in
    - include: rpl_condition_route_has_label
    - include: rpl_condition_orf_prefix_in
    - include: rpl_condition_origin_is
    - include: rpl_condition_ospf_area
    - include: rpl_condition_path_type_is
    - include: rpl_condition_tag
    - include: rpl_condition_tag_in
    - include: rpl_condition_vpn_distinguisher_is
    - match: ''
      set: rpl_condition_statement_list_and_or

  invalid:
    - match: ''

  # TODO: Not Working!
  # Idea is that each condition sets to this context
  rpl_condition_statement_list_and_or:
    - match: |
        (?xi)
        (?:
          \s*
          (?:
            (?:and)|
            (?:or)|
            (?:then)
          )
          \s*
          (\))
        )
      comment: Junk case - logical operator before close parentesis
      captures:
      set: invalid
    - match: |
        (?xi)
        (?:
          \s*
          (\))
          (?=
            \s+
            (?:
              (?:and)|
              (?:or)|
              (?:then)
            )
          )
        )
      captures:
        1: comment
      pop: true
    - match: |
        (?xi)
        (?:
          (?<=\s)
          \b
          (
            (?:and)|
            (?:or)
          )
          \b
          \s+
          (?!\bthen\b)
        )
      scope: route.policy.operator.logical
      captures:
        1: keyword.control
      set: rpl_condition_statement_list
    - match: |
        (?xi)
        (?<=\s)(then)\s*$
      captures:
        1: keyword.control
      set:
        - meta_content_scope: text.network.cisco.rpl.block.if
        - include: rpl_statement
        - include: rpl_elseif
        - include: rpl_else
        - match: |
            (?xi)
            ^\s*(endif)\s*$
          captures:
            1: keyword.control
          pop: true

  rpl_set:
    - include: rpl_set_bgp_community
    - include: rpl_set_route_target
    - include: rpl_set_eigrp_metric
    - include: rpl_set_local_preference
    - include: rpl_set_bgp_med
    - include: rpl_set_ospf_metric_type
    - include: rpl_set_isis_metric_type
    - include: rpl_set_next_hop
    - include: rpl_set_bgp_origin
    - include: rpl_set_ospf_metric
    - include: rpl_set_qos_group
    - include: rpl_set_rib_metric
    - include: rpl_set_rip_tag
    - include: rpl_set_rpf_topology
    - include: rpl_set_spf_priority
    - include: rpl_set_tag
    - include: rpl_set_traffic_index
    - include: rpl_set_vpn_distinguisher
    - include: rpl_set_bgp_weight
    - include: rpl_set_path_selection
    - include: rpl_set_ip_precedence
    - include: rpl_set_isis_metric
    - include: rpl_set_label
    - include: rpl_set_level
    - include: rpl_set_administrative_distance
    - include: rpl_set_aigp_metric
    - include: rpl_set_multicast_core_tree
    - include: rpl_set_bgp_dampening
    - include: rpl_set_bgp_extcommunity_cost

  rpl_delete:
    - include: rpl_delete_bgp_community
    - include: rpl_delete_bgp_extended_community


  rpl_condition_aspath_is_local:
    - match: |
        (?xi)
        \s*(as-path)\s+(is-local)(?={{rpl_end_of_condition_statement}})
      captures:
        1: constant.numeric
        2: constant.numeric

  rpl_condition_aspath_length:
    - match: |
        (?xi)
        \s*(as-path)\s+(length)\s+
        (
          (?:eq)|
          (?:is)|
          (?:ge)|
          (?:le)
        )\s+
        (?:
          ({{number_11_bit}})|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: constant.numeric
        2: support.constant
        3: keyword.operator.logical
        4: constant.numeric
        5: keyword.declaration.rpl
        6: entity.other.attribute-name.rpl

  rpl_parameter:
    - match: |
        (?xi)
        \s*(?:(\$)({{rpl_parameter_name}}))
      captures:
        1: keyword.declaration.rpl
        2: entity.other.attribute-name.rpl

  rpl_set_name:
    - match: |
        (?xi)
        {{rpl_set_name}}
      comment: Single statement
      captures:
        0: string

  rpl_comma_seperator:
    - match: |
        (?xi)
        \s*(,)\s*
      captures:
        1: comment

  rpl_condition_aspath_neighbor_is:
    - match: |
        (?xi)
        \s*(as-path)\s+(neighbor-is)\s+(')\s*
        (?=
          (?:
            (?:\S+\s+)*
            (?:\S+)
          )?
          \s*
          (?:')
        )
      captures:
        1: constant.numeric
        2: support.constant
        3: string.quoted.single
      push:
        - include: rpl_autonomous_system_wo_wildcard
        - include: rpl_parameter
        - match: '\s*'
        - match: (')(\s+exact)?
          captures:
            1: string.quoted.single
            2: support.constant
          pop: true

  rpl_condition_aspath_originates_from:
    - match: |
        (?xi)
        \s*(as-path)\s+(originiates-from)\s+(')\s*
        (?=
          (?:
            (?:\S+\s+)*
            (?:\S+)
          )?
          \s*
          (')
        )
      captures:
        1: constant.numeric
        2: support.constant
        3: string.quoted.single
        4: string.quoted.single
      push:
        - include: rpl_autonomous_system_wo_wildcard
        - include: rpl_parameter
        - match: '\s*'
        - match: (')(\s+exact)?
          captures:
            1: string.quoted.single
            2: support.constant
          pop: true

  rpl_condition_aspath_passes_through:
    - match: |
        (?xi)
        \s*(as-path)\s+(passes-through)\s+(')\s*
        (?=
          (?:
            (?:\S+\s+)*
            (?:\S+)
          )?
          \s*
          (')
        )
      captures:
        1: constant.numeric
        2: support.constant
        3: string.quoted.single
      push:
        - include: rpl_autonomous_system_wo_wildcard
        - include: rpl_parameter
        - match: '\s*'
        - match: (')(\s+exact)?
          captures:
            1: string.quoted.single
            2: support.constant
          pop: true

  rpl_condition_aspath_unique_length:
    - match: |
        (?xi)
        \s*(as-path)\s+(unique-length)\s+
        (
          (?:eq)|
          (?:is)|
          (?:ge)|
          (?:le)
        )
        \s+
        (?=
          \S+{{rpl_end_of_condition_statement}}
        )
      captures:
        1: constant.numeric
        2: support.constant
        3: keyword.operator.logical
      push:
        - match: '{{number_11_bit}}'
          captures:
            0: constant.numeric
        - include: rpl_parameter
        - match: ''
          pop: true

  rpl_condition_community_is_empty:
    - match: |
        (?xi)
        \s*(community)\s+(is-empty)
        (?=
          {{rpl_end_of_condition_statement}}
        )
      captures:
        1: constant.numeric
        2: support.constant

  rpl_condition_extcommunity_rt_constants:
    - match: |
        (?xi)
        \s*(extcommunity)\s+(rt)\s+
        (
          (?:is-empty)
        )
      captures:
        1: constant.character
        2: constant.character
        3: keyword.operator

  rpl_condition_tag:
    - match: |
        (?xi)
        \s*(tag)\s+
        (
          (?:eq)|
          (?:ge)|
          (?:le)|
          (?:is)
        )
        \s+
        (?:
          ({{number_32_bit}})|
          (?:(\$)({{rpl_parameter_name}}))
        )
        (?=
          {{rpl_end_of_condition_statement}}
        )
      captures:
        1: constant.language
        2: keyword.operator.logical
        3: constant.numeric
        4: keyword.declaration.rpl
        5: entity.other.attribute-name.rpl

  rpl_condition_vpn_distinguisher_is:
    - match: |
        (?xi)
        \s*(vpn-distinguisher)\s+(is)\s+
        (?:
          ({{number_32_bit_wo_zero}})|
          (?:(\$)({{rpl_parameter_name}}))
        )
        (?=
          {{rpl_end_of_condition_statement}}
        )
      captures:
        1: constant.language
        2: keyword.operator.logical
        3: constant.numeric
        4: keyword.declaration.rpl
        5: entity.other.attribute-name.rpl

  rpl_condition_route_type_is:
    - match: |
        (?xi)
        \s*(route-type)\s+(is)\s+(?=\S+{{rpl_end_of_condition_statement}})
      captures:
        1: constant.character
        2: keyword.operator.logical
      push:
        - match: |
            (?xi)
            (
              (?:local)|
              (?:interarea)|
              (?:internal)|
              (?:type-[12])|
              (?:level-[12])
            )
          captures:
            1: constant.character
          pop: true
        - include: rpl_parameter
        - match: ''
          pop: true

  rpl_condition_extcommunity_rt_matches_any_every:
    - match: |
        (?xi)
        \s*(extcommunity\s+rt)\s+
        (matches-
          (?:
            (?:any)|
            (?:every)
          )
        )\s+
        (?=
          (?:
            (?:
              \(
              (?:
                (?:\s*{{rpl_inline_statement}}\s*,)*
                (?:\s*{{rpl_inline_statement}}\s*)
              )?
              \s*
              \)
            )|
            (?:{{rpl_parameter}})|
            (?:{{rpl_set_name}})
          )
          {{rpl_end_of_condition_statement}}
        )
      captures:
        1: constant.numeric
        2: keyword.operator
      push:
        - match: |
            (?xi)
            (?={{rpl_end_of_condition_statement}})
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - meta_content_scope: text.network.cisco.rpl.condition.extcommunity.rt.statement.list
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_route_target
                - include: ios_regex
                - include: dfa_regex
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_parameter
        - include: rpl_set_name
        - match: ''
          pop: true

  rpl_condition_destination_in:
    - match: |
        (?xi)
        \s*(destination)\s+(in)\s+
        (?=
          (?:
            (?:
              (\()
              (?:
                (?:\s*{{rpl_inline_statement}}\s*,)*
                (?:\s*{{rpl_inline_statement}}\s*)
              )?
              \s*
              (\))
            )|
            (?:{{rpl_parameter}})|
            (?:{{rpl_set_name}})
          )
          {{rpl_end_of_condition_statement}}
        )
      captures:
        1: constant.numeric
        2: keyword.operator
        3: comment
        4: comment
      push:
        - match: |
            (?xi)
            (?={{rpl_end_of_condition_statement}})
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - meta_content_scope: text.network.cisco.rpl.condition.destination.statement.list
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_prefix
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_parameter
        - include: rpl_set_name
        - match: ''
          pop: true

  rpl_condition_community_matches_any_every:
    - match: |
        (?xi)
        \s*(community)\s+
        (matches-
          (?:
            (?:any)|
            (?:every)
          )
        )\s+{{rpl_inline_condition_parentheses_comma_separated_lookahead}}
      captures:
        1: constant.numeric
        2: keyword.operator
      push:
        - match: |
            (?xi)
            (?={{rpl_end_of_condition_statement}})
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - meta_content_scope: text.network.cisco.rpl.condition.community.statement.list
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_community
                - include: ios_regex
                - include: dfa_regex
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_parameter
        - include: rpl_set_name
        - match: ''
          pop: true

  rpl_condition_tag_in:
    - match: |
        (?xi)
        \s*(tag)\s+(in)\s+{{rpl_inline_condition_parentheses_comma_separated_lookahead}}
      captures:
        1: constant.numeric
        2: keyword.operator
      push:
        - match: |
            (?xi)
            (?={{rpl_end_of_condition_statement}})
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_tag
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_parameter
        - include: rpl_set_name
        - match: ''
          pop: true

  rpl_condition_aspath_in:
    - match: |
        (?xi)
        \s*(as-path)\s+(in)\s+{{rpl_inline_condition_parentheses_comma_separated_lookahead}}
      captures:
        1: constant.numeric
        2: keyword.operator.logical
      push:
        - match: |
            (?xi)
            (?={{rpl_end_of_condition_statement}})
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - meta_content_scope: text.network.cisco.rpl.condition.community.statement.list
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_autonomous_system_wo_wildcard
                - include: ios_regex
                - include: dfa_regex
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_parameter
        - include: rpl_set_name
        - match: ''
          pop: true

  rpl_then_lookahead_pop:
    - match: |
        (?xi)
        (?=\s*then)
      pop: true

  rpl_condition_protocol:
    - match: |
        (?xi)
        \s*(protocol)\s+(is)\s+(?={{rpl_inline_statement}})
      captures:
        1: constant.numeric
        2: keyword.operator.logical
      push:
        - include: rpl_protocol
        - match: ''
          pop: true
    - match: |
        (?xi)
        \s*(protocol)\s+(in)\s+{{rpl_inline_condition_parentheses_comma_separated_lookahead}}
      captures:
        1: constant.numeric
        2: keyword.operator.logical
      push:
        - match: |
            (?xi)
            (?={{rpl_end_of_condition_statement}})
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - meta_content_scope: text.network.cisco.rpl.condition.protocol.statement.list
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_protocol
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - match: ''
          pop: true

  rpl_condition_rd_in:
    - match: |
        (?xi)
        \s*(rd)\s+(in)\s+{{rpl_inline_condition_parentheses_comma_separated_lookahead}}
      captures:
        1: constant.numeric
        2: keyword.operator.logical
      push:
        - match: |
            (?xi)
            (?={{rpl_end_of_condition_statement}})
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - meta_content_scope: text.network.cisco.rpl.condition.rd.statement.list
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_rd
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_parameter
        - include: rpl_set_name
        - match: ''
          pop: true


  # https://www.cisco.com/c/en/us/td/docs/routers/asr9000/software/asr9k-r6-2/routing/command/reference/b-routing-cr-asr9000-62x/b-routing-cr-asr9000-62x_chapter_01010.html#wp2566062071
  rpl_apply:
    - match: |
        (?xi)
        ^\s*(apply)\s+(\S+)
        (?:
          \s+
          (\()
          (?:
            (?:
              (?:
                (?:(\$)({{rpl_parameter_name}}))|
                (\d+)
              )
              (,\s*)
            )*
            (?:
              (?:
                (?:(\$)({{rpl_parameter_name}}))|
                (\d+)
              )
            )
          )?
          (\))
        )?
      captures:
        1: entity.other.attribute-name
        2: string.unquoted
        3: comment
        4: keyword.declaration.rpl
        5: entity.other.attribute-name.rpl
        6: constant.numeric
        7: support.constant
        8: keyword.declaration.rpl
        9: entity.other.attribute-name.rpl
        10: constant.numeric
        11: comment

  # https://www.cisco.com/c/en/us/td/docs/routers/asr9000/software/asr9k-r6-2/routing/command/reference/b-routing-cr-asr9000-62x/b-routing-cr-asr9000-62x_chapter_01010.html#wp2566062071
  rpl_set_eigrp_metric:
    - match: |
        (?xi)
        ^\s*(set)\s+(eigrp-metric)\s+
        ({{number_32_bit}})\s+
        ({{number_32_bit}})\s+
        ({{number_8_bit}})\s+
        ({{number_8_bit}})\s+
        ({{number_16_bit_wo_zero}})
      captures:
        1: entity.other.attribute-name
        2: support.constant
        3: constant.numeric
        4: constant.numeric
        5: constant.numeric
        6: constant.numeric
        7: constant.numeric

  rpl_edit:
    - include: rpl_edit_route_policy
    - include: rpl_edit_prefix_set
    - include: rpl_edit_as_path_set
    - include: rpl_edit_community_set
    - include: rpl_edit_extcommunity_rt_set
    - include: rpl_edit_extcommunity_soo_set
    - include: rpl_edit_rd_set
    - include: rpl_edit_policy_global

  rpl_edit_route_policy:
    - match: |
        (?xi)
        ^\s*(edit)\s+(route-policy)\s+
      captures:
        1: keyword.control
        2: constant.character

  # TODO: Refactor to standard inline regex variables
  rpl_edit_prefix_set:
    - match: |
        (?xi)
        ^\s*(edit)\s+(prefix-set)\s+(?=\S+\s+inline)
      captures:
        1: keyword.control
        2: constant.character
      push: [rpl_edit_prefix_inline_entries, rpl_edit_editor]
    - match: |
        (?xi)
        ^\s*(edit)\s+(prefix-set)\s+
      captures:
        1: keyword.control
        2: constant.character
      push: rpl_edit_editor

  rpl_edit_prefix_inline_entries:
    - match: |
        (?xi)
        \s*(")(?=.*(")\s*$)
      comment: Double quoted inline statement list
      captures:
        1: string.quoted.double
        2: string.quoted.double
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.set.prefix.statement.list
        - match: |
            (?xi)
            (?=\s*[^,"]*\s*[,"])
          comment: Statement ending in a comma or double quote
          set:
            - include: rpl_prefix
            - match: '\s*,\s*'
              captures:
                0: comment
            - match: '\s*"\s*'
              captures:
                0: string.quoted.double
              pop: true
        - match: ''
          comment: End inline statement list
          pop: true
    - match: |
        (?xi)
        (?=\s*[^"].*$)
      comment: Single statement
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.set.prefix.statement.single
        - include: rpl_prefix
        - match: '\s*$'
          comment: End single statement
          pop: true

  rpl_edit_as_path_set:
    - match: |
        (?xi)
        ^\s*(edit)\s+(as-path-set)\s+(?=\S+\s+inline)
      captures:
        1: keyword.control
        2: constant.character
      push: [rpl_edit_as_path_inline_entries, rpl_edit_editor]
    - match: |
        (?xi)
        ^\s*(edit)\s+(as-path-set)\s+
      captures:
        1: keyword.control
        2: constant.character
      push: rpl_edit_editor


  rpl_edit_as_path_inline_entries:
    - match: |
        (?xi)
        \s*(")(?=.*(")\s*$)
      comment: Double quoted inline statement list
      captures:
        1: string.quoted.double
        2: string.quoted.double
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.set.as_path.statement.list
        - match: |
            (?xi)
            (?=\s*[^,"]*\s*[,"])
          comment: Statement ending in a comma or double quote
          set:
            - include: ios_regex
            - include: dfa_regex
            - match: '\s*,\s*'
              captures:
                0: comment
            - match: '\s*"\s*'
              captures:
                0: string.quoted.double
              pop: true
        - match: ''
          comment: End inline statement list
          pop: true
    - match: |
        (?xi)
        (?=\s*[^"].*$)
      comment: Single statement
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.set.as_path.statement.single
        - include: ios_regex
        - include: dfa_regex
        - match: '\s*$'
          comment: End single statement
          pop: true

  rpl_edit_community_set:
    - match: |
        (?xi)
        ^\s*(edit)\s+(community-set)\s+(?=\S+\s+inline)
      captures:
        1: keyword.control
        2: constant.character
      push: [rpl_edit_community_set_inline_entries, rpl_edit_editor]
    - match: |
        (?xi)
        ^\s*(edit)\s+(community-set)\s+
      captures:
        1: keyword.control
        2: constant.character
      push: rpl_edit_editor

  rpl_edit_community_set_inline_entries:
    - match: |
        (?xi)
        \s*(")(?=.*(")\s*$)
      comment: Double quoted inline statement list
      captures:
        1: string.quoted.double
        2: string.quoted.double
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.set.community.statement.list
        - match: |
            (?xi)
            (?=\s*[^,"]*\s*[,"])
          comment: Statement ending in a comma or double quote
          set:
            - include: rpl_community
            - include: ios_regex
            - include: dfa_regex
            - match: '\s*,\s*'
              captures:
                0: comment
            - match: '\s*"\s*'
              captures:
                0: string.quoted.double
              pop: true
        - match: ''
          comment: End inline statement list
          pop: true
    - match: |
        (?xi)
        (?=\s*[^"].*$)
      comment: Single statement
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.set.community.statement.single
        - include: rpl_community
        - include: ios_regex
        - include: dfa_regex
        - match: '\s*$'
          comment: End single statement
          pop: true

  rpl_edit_extcommunity_rt_set:
    - match: |
        (?xi)
        ^\s*(edit)\s+(extcommunity-set)\s+(rt)\s+(?=\S+\s+inline)
      captures:
        1: keyword.control
        2: constant.character
        3: constant.character
      push: [rpl_edit_extcommunity_rt_set_inline_entries, rpl_edit_editor]
    - match: |
        (?xi)
        ^\s*(edit)\s+(extcommunity-set)\s+(rt)\s+
      captures:
        1: keyword.control
        2: constant.character
        3: constant.character
      push: rpl_edit_editor

  rpl_edit_extcommunity_rt_set_inline_entries:
    - match: |
        (?xi)
        \s*(")(?=.*(")\s*$)
      comment: Double quoted inline statement list
      captures:
        1: string.quoted.double
        2: string.quoted.double
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.set.extcommunity.rt.statement.list
        - match: |
            (?xi)
            (?=\s*[^,"]*\s*[,"])
          comment: Statement ending in a comma or double quote
          set:
            - include: rpl_route_target
            - include: ios_regex
            - include: dfa_regex
            - match: '\s*,\s*'
              captures:
                0: comment
            - match: '\s*"\s*'
              captures:
                0: string.quoted.double
              pop: true
        - match: ''
          comment: End inline statement list
          pop: true
    - match: |
        (?xi)
        (?=\s*[^"].*$)
      comment: Single statement
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.set.extcommunity.rt.statement.single
        - include: rpl_route_target
        - include: ios_regex
        - include: dfa_regex
        - match: '\s*$'
          comment: End single statement
          pop: true

  rpl_edit_extcommunity_soo_set:
    - match: |
        (?xi)
        ^\s*(edit)\s+(extcommunity-set)\s+(soo)\s+(?=\S+\s+inline)
      captures:
        1: keyword.control
        2: constant.character
        3: constant.character
      push: [rpl_edit_extcommunity_soo_set_inline_entries, rpl_edit_editor]
    - match: |
        (?xi)
        ^\s*(edit)\s+(extcommunity-set)\s+(soo)\s+
      captures:
        1: keyword.control
        2: constant.character
        3: constant.character
      push: rpl_edit_editor

  rpl_edit_extcommunity_soo_set_inline_entries:
    - match: |
        (?xi)
        \s*(")(?=.*(")\s*$)
      comment: Double quoted inline statement list
      captures:
        1: string.quoted.double
        2: string.quoted.double
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.set.extcommunity.soo.statement.list
        - match: |
            (?xi)
            (?=\s*[^,"]*\s*[,"])
          comment: Statement ending in a comma or double quote
          set:
            - include: rpl_route_target
            - include: ios_regex
            - include: dfa_regex
            - match: '\s*,\s*'
              captures:
                0: comment
            - match: '\s*"\s*'
              captures:
                0: string.quoted.double
              pop: true
        - match: ''
          comment: End inline statement list
          pop: true
    - match: |
        (?xi)
        (?=\s*[^"].*$)
      comment: Single statement
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.set.extcommunity.soo.statement.single
        - include: rpl_route_target
        - include: ios_regex
        - include: dfa_regex
        - match: '\s*$'
          comment: End single statement
          pop: true

  rpl_edit_rd_set:
    - match: |
        (?xi)
        ^\s*(edit)\s+(rd-set)\s+(?=\S+\s+inline)
      captures:
        1: keyword.control
        2: constant.character
      push: [rpl_edit_rd_set_inline_entries, rpl_edit_editor]
    - match: |
        (?xi)
        ^\s*(edit)\s+(rd-set)\s+
      captures:
        1: keyword.control
        2: constant.character
      push: rpl_edit_editor

  rpl_edit_rd_set_inline_entries:
    - match: |
        (?xi)
        \s*(")(?=.*(")\s*$)
      comment: Double quoted inline statement list
      captures:
        1: string.quoted.double
        2: string.quoted.double
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.set.rd.statement.list
        - match: |
            (?xi)
            (?=\s*[^,"]*\s*[,"])
          comment: Statement ending in a comma or double quote
          set:
            - include: rpl_rd
            - match: '\s*,\s*'
              captures:
                0: comment
            - match: '\s*"\s*'
              captures:
                0: string.quoted.double
              pop: true
        - match: ''
          comment: End inline statement list
          pop: true
    - match: |
        (?xi)
        (?=\s*[^"].*$)
      comment: Single statement
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.set.rd.statement.single
        - include: rpl_rd
        - match: '\s*$'
          comment: End single statement
          pop: true

  rpl_edit_policy_global:
    - match: |
        (?xi)
        ^\s*(edit)\s+(policy-global)\s+(?=\S+\s+inline)
      captures:
        1: keyword.control
        2: support.constant
      push: [rpl_edit_policy_global_inline_entries, rpl_edit_editor]
    - match: |
        (?xi)
        ^\s*(edit)\s+(policy-global)\s+
      captures:
        1: keyword.control
        2: support.constant
      push: rpl_edit_editor

  rpl_edit_policy_global_inline_entries:
    - match: |
        (?xi)
        \s*(")(?=.*(")\s*$)
      comment: Double quoted inline statement list
      captures:
        1: string.quoted.double
        2: string.quoted.double
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.policy_global.statement.list
        - match: |
            (?xi)
            (?=\s*[^,"]*\s*[,"])
          comment: Statement ending in a comma or double quote
          set:
            - include: policy_global_key_value
            - match: '\s*,\s*'
              captures:
                0: comment
            - match: '\s*"\s*'
              captures:
                0: string.quoted.double
              pop: true
        - match: ''
          comment: End inline statement list
          pop: true
    - match: |
        (?xi)
        (?=\s*[^"].*$)
      comment: Single statement
      set:
        - meta_content_scope: text.network.cisco.rpl.edit.policy_global.statement.single
        - include: policy_global_key_value
        - match: '\s*$'
          comment: End single statement
          pop: true

  rpl_edit_editor:
    - match: |
        (?xi)
        ({{rpl_set_name}})
        (?:
          \s+
          (?:
            (nano)|
            (emacs)|
            (vim)
          )
        )
      captures:
        1: string.unquoted
        2: support.constant
        3: support.constant
        4: support.constant
      pop: true
    - match: |
        (?xi)
        ({{rpl_set_name}})
        (?:
          \s+
          (?:
            (inline)\s+
            (?:
              (add)|
              (prepend)|
              (remove)
            )
          )
        )
      captures:
        1: string.unquoted
        2: support.constant
        3: entity.other.attribute-name
        4: entity.other.attribute-name
        5: keyword.other
      pop: true
    - match: |
        (?xi)
        ({{rpl_set_name}})
      captures:
        1: string.unquoted
      pop: true

  rpl_var_global:
    - match: |
        (?x)
        ^\s*(var)\s+(globalVar)([1-5])\s+
        (?:
          ({{number_32_bit}})|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: keyword
        2: entity.other.attribute-name.rpl
        3: constant.numeric
        4: constant.numeric
        5: keyword.declaration.rpl
        6: entity.other.attribute-name.rpl

  rpl_add:
    - include: rpl_add_eigrp_metric
    - include: rpl_add_rip_metric

  rpl_add_eigrp_metric:
    - match: |
        (?xi)
        ^\s*(add)\s+(eigrp-metric)\s+
        ({{number_32_bit}})\s+
        ({{number_32_bit}})\s+
        ({{number_8_bit}})\s+
        ({{number_8_bit}})\s+
        ({{number_16_bit_wo_zero}})
      captures:
        1: entity.other.attribute-name
        2: support.constant
        3: constant.numeric
        4: constant.numeric
        5: constant.numeric
        6: constant.numeric
        7: constant.numeric

  rpl_add_rip_metric:
    - match: |
        (?xi)
        ^\s*(add)\s+(rip-metric)\s+
        (?:
          ((?:1[0-6])|\d)|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: entity.other.attribute-name
        2: support.constant
        3: constant.numeric
        4: keyword.declaration.rpl
        5: entity.other.attribute-name.rpl

  rpl_prepend_as_path:
    - match: |
        (?xi)
        ^\s*(prepend)\s+(as-path)\s+
      captures:
        1: entity.other.attribute-name
        2: constant.character
      push:
        - meta_content_scope: text.network.cisco.rpl.prepend.as_path
        - match: |
            (?xi)
            (\$)({{rpl_parameter_name}})
          captures:
            1: keyword.declaration.rpl
            2: entity.other.attribute-name.rpl
        - match: |
            (?xi)
            (
              (?:most-recent)
            )
          captures:
            1: constant.character
        - include: rpl_autonomous_system_wo_wildcard
        - match: ''
          set:
            - meta_content_scope: text.network.cisco.rpl.prepend.as_path.optional
            - match: |
                (?xi)
                \s+
                (?:
                  (
                    (?:6[0-3])|
                    (?:[0-5]\d)|
                    (?:[1-9])
                  )|
                  (?:(\$)({{rpl_parameter_name}}))
                )
              captures:
                1: constant.numeric
                2: keyword.declaration.rpl
                3: entity.other.attribute-name.rpl
            - match: ''
              pop: true

  rpl_replace_as_path:
    - match: |
        (?xi)
        ^\s*(replace)\s+(as-path)\s+
      captures:
        1: keyword.other
        2: constant.character
      push:
        - meta_content_scope: text.network.cisco.rpl.replace.as_path
        - match: |
            (?xi)
            (\$)({{rpl_parameter_name}})
          captures:
            1: keyword.declaration.rpl
            2: entity.other.attribute-name.rpl
          pop: true
        - match: |
            (?xi)
            (
              (?:private-as)
            )
          captures:
            1: constant.character
          pop: true
        - match: |
            (?xi)
            (')
            (?=
              (?:
                (?:\s*\S+\s*,)*
                (?:\s*\S+\s*)
              )?
              \s*
              (')
              \s*
              $
            )
          captures:
            1: string.quoted.single
            2: string.quoted.single
          set:
            - match: |
                (?xi)
                '
              captures:
                0: string.quoted.single
              pop: true
            - include: rpl_autonomous_system_wo_wildcard
            - match: |
                (?xi)
                \s*,\s*(?=[^'])
              captures:
                0: comment



  rpl_set_bgp_community:
    - match: |
        (?xi)
        ^\s*(set)\s+(community)\s+{{rpl_inline_parentheses_comma_separated_lookahead_w_additive}}
      captures:
        1: entity.other.attribute-name
        2: support.constant
      push:
        - match: |
            (?xi)
            (\s*\))(?:\s+(additive))?
          captures:
            1: comment
            2: support.constant
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_community_wo_wildcard_or_range
                - include: rpl_comma_seperator
                - match: '\s*(\))(?:\s+(additive))?\s*'
                  captures:
                    1: comment
                    2: support.constant
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_community_wo_wildcard_or_range
        - include: rpl_parameter
        - include: rpl_set_name
        - match: '\s+(additive)'
          captures:
            1: support.constant
          pop: true
        - match: ''
          pop: true

  rpl_set_bgp_extcommunity_cost:
    - match: |
        (?xi)
        ^\s*(set)\s+(extcommunity\s+cost)\s+{{rpl_inline_parentheses_comma_separated_lookahead_w_additive}}
      captures:
        1: entity.other.attribute-name
        2: constant.character
      push:
        - match: |
            (?xi)
            (\s*\))(?:\s+(additive))?
          captures:
            1: comment
            2: support.constant
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_bgp_extended_community_cost
                - include: rpl_comma_seperator
                - match: '\s*(\))(?:\s+(additive))?\s*'
                  captures:
                    1: comment
                    2: support.constant
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_bgp_extended_community_cost
        - include: rpl_parameter
        - include: rpl_set_name
        - match: '\s+(additive)'
          captures:
            1: support.constant
          pop: true
        - match: ''
          pop: true

  rpl_set_multicast_core_tree:
    - match: |
        (?xi)
        ^\s*(set)\s+(core-tree)\s+
        (?:
          (
           (?:gre-rosen)|
           (?:mldp-inband)|
           (?:mldp-partitioned-mp2mp)|
           (?:mldp-partitioned-p2mp)|
           (?:mldp-rosen)|
           (?:rsvp-te-partitioned-p2mp)
          )|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: constant.character
        4: keyword.declaration.rpl
        5: entity.other.attribute-name.rpl

  rpl_set_bgp_dampening:
    - match: |
        (?xi)
        ^\s*(set)\s+(dampening)
        (?:
          (?:
            (?:
              (\s+halflife)\s+
              (?:
                (
                  (?:4[0-5])|
                  (?:[0-3]?\d)
                )|
                (?:(\$)(\S+))
              )
            )?
            (?:
              (\s+max-suppress)\s+
              (?:
                ((?:20000)|(?:[0-1]?\d{1,3}))|
                (?:(\$)({{rpl_parameter_name}}))
              )
            )?
            (?:
              (\s+reuse)\s+
              (?:
                ((?:20000)|(?:[0-1]?\d{1,3}))|
                (?:(\$)({{rpl_parameter_name}}))
              )
            )?
            (?:
              (\s+suppress)\s+
              (?:
                ((?:20000)|(?:[0-1]?\d{1,3}))|
                (?:(\$)({{rpl_parameter_name}}))
              )
            )?
            (\s+others\s+default)?
          )
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: support.constant
        4: constant.numeric
        5: keyword.declaration.rpl
        6: entity.other.attribute-name.rpl
        7: support.constant
        8: constant.numeric
        9: keyword.declaration.rpl
        10: entity.other.attribute-name.rpl
        11: support.constant
        12: constant.numeric
        13: keyword.declaration.rpl
        14: entity.other.attribute-name.rpl
        15: support.constant
        16: constant.numeric
        17: keyword.declaration.rpl
        18: entity.other.attribute-name.rpl
        19: support.constant

  rpl_set_administrative_distance:
    - match: |
        (?xi)
        ^\s*(set)\s+(administrative-distance)\s+
        (?:
          ({{administrative_distance}})|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: constant.numeric
        4: keyword.declaration.rpl
        5: entity.other.attribute-name.rpl

  rpl_set_aigp_metric:
    - match: |
        (?xi)
        ^\s*(set)\s+(aigp-metric)\s+
        (?:
          (igp-cost)|
          ({{aigp_metric}})
        )
      captures:
        1: entity.other.attribute-name
        2: support.constant
        3: constant.character
        4: constant.numeric

  rpl_set_ip_precedence:
    - match: |
        (?xi)
        ^\s*(set)\s+(ip-precedence)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          ([0-7])
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric

  rpl_set_isis_metric:
    - match: |
        (?xi)
        ^\s*(set)\s+(isis-metric)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          ({{number_24_bit}})
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric

  rpl_set_label:
    - match: |
        (?xi)
        ^\s*(set)\s+(label)\s+
        (?:
          (explicit-null)|
          (implicit-null)|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: constant.numeric
        4: constant.numeric
        5: keyword.declaration.rpl
        6: entity.other.attribute-name.rpl

  rpl_set_level:
    - match: |
        (?xi)
        ^\s*(set)\s+(level)\s+
        (?:
          (level-1-2)|
          (level-[12])|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: constant.numeric
        4: constant.numeric
        5: keyword.declaration.rpl
        6: entity.other.attribute-name.rpl

  rpl_set_local_preference:
    - match: |
        (?xi)
        ^\s*(set)\s+(local-preference)\s+
        (?:
          ({{bgp_local_preference}})|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: constant.numeric
        4: keyword.declaration.rpl
        5: entity.other.attribute-name.rpl

  rpl_set_bgp_med:
    - match: |
        (?xi)
        ^\s*(set)\s+(med)\s+
        (?:
          (?:([+-]\s*)?({{bgp_med}}))|
          (?:(\$)({{rpl_parameter_name}}))|
          (igp-cost)|
          (max-reachable)
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.operator
        4: constant.numeric
        5: keyword.declaration.rpl
        6: entity.other.attribute-name.rpl
        7: constant.numeric
        8: constant.numeric

  rpl_set_ospf_metric_type:
    - match: |
        (?xi)
        ^\s*(set)\s+(metric-type)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          (type-[12])
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric

  rpl_set_isis_metric_type:
    - match: |
        (?xi)
        ^\s*(set)\s+(metric-type)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          ((?:rib-metric-as-)?internal)|
          ((?:rib-metric-as-)?external)
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.character
        6: constant.character

  rpl_set_next_hop:
    - match: |
        (?xi)
        ^\s*(set)\s+(next-hop)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          ({{ip}})|
          ({{ipv6}})|
          (peer-address)|
          (self)
        )
        (\s+destination-vrf)?
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric
        6: constant.numeric
        7: constant.numeric
        8: constant.numeric
        9: support.constant

  rpl_set_bgp_origin:
    - match: |
        (?xi)
        ^\s*(set)\s+(origin)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          ([ei]gp)|
          (incomplete)
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric
        6: constant.numeric

  rpl_set_ospf_metric:
    - match: |
        (?xi)
        ^\s*(set)\s+(ospf-metric)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          ({{ospf_metric}})
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric

  rpl_set_qos_group:
    - match: |
        (?xi)
        ^\s*(set)\s+(qos-group)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          (
            (?:3[0-1])|
            (?:[1-2]?\d)
          )
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric

  rpl_set_rib_metric:
    - match: |
        (?xi)
        ^\s*(set)\s+(rib-metric)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          ({{number_32_bit}})
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric

  rpl_set_rip_tag:
    - match: |
        (?xi)
        ^\s*(set)\s+(rip-tag)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          ({{number_16_bit_wo_zero}})
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric

  rpl_set_rpf_topology:
    - match: |
        (?xi)
        ^\s*(set)\s+(rpf-topology)\s+
        (?:(vrf)\s+({{vrf_name}})\s+)?
        (ipv[46]\s+)
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          (unicast)|
          (multicast)
        )
        \s+
        (topology)\s+
        ([a-z0-9]+)
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: support.constant
        4: string.unquoted
        5: support.constant
        6: keyword.declaration.rpl
        7: entity.other.attribute-name.rpl
        8: constant.numeric
        9: constant.numeric
        10: support.constant
        11: string.unquoted

  rpl_set_spf_priority:
    - match: |
        (?xi)
        ^\s*(set)\s+(spf-priority)\s+
        (
          (?:critical)|
          (?:high)|
          (?:medium)
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: constant.character

  rpl_set_tag:
    - match: |
        (?xi)
        ^\s*(set)\s+(tag)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          ({{number_32_bit}})
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric

  rpl_set_traffic_index:
    - match: |
        (?xi)
        ^\s*(set)\s+(traffic-index)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          (
            (?:6[0-3])|
            (?:[0-5]\d)|
            (?:[1-9])
          )|
          (ignore)
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric
        6: constant.numeric

  rpl_set_vpn_distinguisher:
    - match: |
        (?xi)
        ^\s*(set)\s+(vpn-distinguisher)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          ({{number_32_bit}})
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric

  rpl_set_bgp_weight:
    - match: |
        (?xi)
        ^\s*(set)\s+(weight)\s+
        (?:
          (?:(\$)({{rpl_parameter_name}}))|
          ({{number_16_bit_wo_zero}})
        )
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: keyword.declaration.rpl
        4: entity.other.attribute-name.rpl
        5: constant.numeric

  rpl_set_path_selection:
    - match: |
        (?xi)
        ^\s*(set)\s+(path-selection)\s+
        (?:
          (?:(backup)\s+([0-7]))|
          (group-best)|
          (all)|
          (best-path)
        )
        (\s+install)?
        (\s+multipath-protect)?
        (\s+advertise)?
      captures:
        1: entity.other.attribute-name
        2: constant.character
        3: support.constant
        4: constant.numeric
        5: constant.numeric
        6: constant.numeric
        7: constant.numeric
        8: support.constant
        9: support.constant
        10: support.constant

  rpl_remove_as_path_private_as:
    - match: |
        (?xi)
        ^\s*(remove)\s+(as-path)\s+(private-as)(\s+entire-aspath)?
      captures:
        1: keyword.operator.word
        2: constant.character
        3: support.constant
        4: support.constant

  rpl_suppress_route:
    - match: |
        (?xi)
        ^\s*((?:un)?suppress-route)
      captures:
        1: keyword.operator.word

  rpl_bgp_extended_community_cost:
    - match: |
        (?xi)
        (?:
          (
            (?:igp)|
            (?:pre-bestpath)
          )
          (:)
          (?:
            (?:
              ({{number_8_bit}})|
              (?:(\$)({{rpl_parameter_name}}))
            )
          )
          (:)
          (?:
            (?:
              ({{number_32_bit}})|
              (?:(\$)({{rpl_parameter_name}}))
            )
          )
        )
      captures:
        1: constant.character
        2: constant.numeric
        3: constant.numeric
        4: keyword.declaration.rpl
        5: entity.other.attribute-name.rpl
        6: constant.numeric
        7: constant.numeric
        8: keyword.declaration.rpl
        9: entity.other.attribute-name.rpl

  rpl_route_target:
    - match: |
        (?xi)
        \s*
        (?:
          (?:
            (?:
              ({{ip_prefix}})|
              ({{ip}})|
              ({{number_32_bit}})|
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
            (:)
            (?:
              ({{number_16_bit_wo_zero}})|
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
          )|
          (?:
            (?:
              ({{number_16_bit_wo_zero}})|
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
            (:)
            (?:
              ({{number_32_bit}})|
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
          )|
          (?:
            (?:
              ({{number_16_bit_wo_zero}})|
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
            (\.)
            (?:
              ({{number_16_bit_wo_zero}})|
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
            (:)
            (?:
              ({{number_16_bit_wo_zero}})|
              (\*)|
              (?:(\$)({{rpl_parameter_name}}))
            )
          )
        )
      captures:
        1: constant.numeric
        2: constant.numeric
        3: constant.numeric
        4: keyword
        5: keyword.declaration.rpl
        6: entity.other.attribute-name.rpl
        7: constant.character
        8: constant.numeric
        9: keyword
        10: keyword.declaration.rpl
        11: entity.other.attribute-name.rpl
        12: constant.numeric
        13: keyword
        14: keyword.declaration.rpl
        15: entity.other.attribute-name.rpl
        16: constant.character
        17: constant.numeric
        18: keyword
        19: keyword.declaration.rpl
        20: entity.other.attribute-name.rpl
        21: constant.numeric
        22: keyword
        23: keyword.declaration.rpl
        24: entity.other.attribute-name.rpl
        25: constant.character
        26: constant.numeric
        27: keyword
        28: keyword.declaration.rpl
        29: entity.other.attribute-name.rpl
        30: constant.character
        31: constant.numeric
        32: keyword
        33: keyword.declaration.rpl
        34: entity.other.attribute-name.rpl

  rpl_tag:
    - match: |
        (?xi)
        ({{number_32_bit}})
      captures:
        1: constant.numeric

  rpl_set_route_target:
    - match: |
        (?xi)
        ^\s*(set)\s+(extcommunity\s+rt)\s+{{rpl_inline_parentheses_comma_separated_lookahead_w_additive}}
      captures:
        1: entity.other.attribute-name
        2: constant.character
      push:
        - match: |
            (?xi)
            (\s*\))(?:\s+(additive))?
          captures:
            1: comment
            2: support.constant
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_route_target
                - include: rpl_comma_seperator
                - match: '\s*(\))(?:\s+(additive))?\s*'
                  captures:
                    1: comment
                    2: support.constant
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_route_target
        - include: rpl_parameter
        - include: rpl_set_name
        - match: '\s+(additive)'
          captures:
            1: support.constant
          pop: true
        - match: ''
          pop: true


  rpl_delete_bgp_community:
    - match: |
        (?xi)
        ^\s*(delete)\s+(community)\s+
        (?:
          (all)|
          (?:
            ((?:not\s+)?in)\s+{{rpl_inline_parentheses_comma_separated_lookahead}}
          )
        )
      captures:
        1: keyword.control
        2: constant.character
        3: keyword.operator.logical.rpl
        4: keyword.operator.logical.rpl
      push:
        - match: |
            (?xi)
            (?:
              (?:private-as)
            )
          captures:
            0: constant.character
          pop: true
        - match: |
            (?xi)
            \s*(?:(\$)({{rpl_parameter_name}}))
          captures:
            1: keyword.declaration.rpl
            2: entity.other.attribute-name.rpl
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_community
                - include: ios_regex
                - include: dfa_regex
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_set_name
        - match: ''
          pop: true


  rpl_delete_bgp_extended_community:
    - match: |
        (?xi)
        ^\s*(delete)\s+(extcommunity)\s+(rt)\s+(all)
      captures:
        1: keyword.control
        2: constant.character
        3: constant.character
        4: keyword.operator.logical.rpl
    - match: |
        (?xi)
        ^\s*(delete)\s+(extcommunity)\s+(rt)\s+((?:not\s+)?in)\s+{{rpl_inline_parentheses_comma_separated_lookahead}}
      captures:
        1: keyword.control
        2: constant.character
        3: constant.character
        4: keyword.operator.logical.rpl
      push:
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_extended_community
                - include: ios_regex
                - include: dfa_regex
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_parameter
        - include: rpl_set_name
        - match: ''
          pop: true

  rpl_condition_global_var_is:
    - match: |
        (?x)
        (globalVar)([1-5])
        \s+
        (is)
        \s+
        (?:
          ({{number_32_bit}})|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: entity.other.attribute-name.rpl
        2: constant.numeric
        3: keyword
        4: constant.numeric
        5: keyword.declaration.rpl
        6: entity.other.attribute-name.rpl

  rpl_condition_route_aggregated:
    - match: |
        (?x)
        (route-aggregated)
      captures:
        1: constant.character

  rpl_condition_is_best_path:
    - match: |
        (?x)
        (is-best-path)
      captures:
        1: constant.character

  rpl_condition_is_backup_path:
    - match: |
        (?x)
        (is-backup-path)
      captures:
        1: constant.numeric

  rpl_condition_is_multi_path:
    - match: |
        (?x)
        (is-multi-path)
      captures:
        1: constant.numeric

  rpl_condition_local_preference:
    - match: |
        (?x)
        (local-preference)\s+
        (
          (?:eq)|
          (?:is)|
          (?:ge)|
          (?:le)
        )
        \s+
        (?:
          ({{number_32_bit}})|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: constant.character
        2: keyword.operator.logical
        3: constant.numeric
        4: keyword.declaration.rpl
        5: entity.other.attribute-name.rpl

  rpl_condition_med:
    - match: |
        (?x)
        (med)\s+
        (
          (?:eq)|
          (?:is)|
          (?:ge)|
          (?:le)
        )
        \s+
        (?:
          ({{number_32_bit}})|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: constant.character
        2: keyword.operator.logical
        3: constant.numeric
        4: keyword.declaration.rpl
        5: entity.other.attribute-name.rpl

  rpl_condition_origin_is:
    - match: |
        (?x)
        (origin)\s+(is)\s+
        (?:
          (igp)|
          (egp)|
          (incomplete)|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: constant.character
        2: keyword.operator.logical
        3: constant.numeric
        4: constant.numeric
        5: constant.numeric
        6: keyword.declaration.rpl
        7: entity.other.attribute-name.rpl

  rpl_condition_path_type_is:
    - match: |
        (?x)
        (path-type)\s+(is)\s+
        (?:
          (ibgp)|
          (ebgp)|
          (?:(\$)({{rpl_parameter_name}}))
        )
      captures:
        1: constant.character
        2: keyword.operator.logical
        3: constant.numeric
        4: constant.numeric
        5: keyword.declaration.rpl
        6: entity.other.attribute-name.rpl

  rpl_condition_ospf_area:
    - match: |
        (?xi)
        \s*(ospf-area)\s+(is)\s+(?=\S+{{rpl_end_of_condition_statement}})
      captures:
        1: constant.character
        2: keyword.operator
      push:
        - include: rpl_ospf_area_id
        - match: ''
          pop: true
    - match: |
        (?xi)
        \s*(ospf-area)\s+(in)\s+{{rpl_inline_condition_parentheses_comma_separated_lookahead}}
      captures:
        1: constant.numeric
        2: keyword.operator
      push:
        - match: |
            (?xi)
            (?={{rpl_end_of_condition_statement}})
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_ospf_area_id
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_ospf_area_id
        - include: rpl_set_name
        - match: ''
          pop: true

  rpl_condition_next_hop_in:
    - match: |
        (?xi)
        \s*(next-hop)\s+(in)\s+{{rpl_inline_condition_parentheses_comma_separated_lookahead}}
      captures:
        1: constant.numeric
        2: keyword.operator
      push:
        - match: |
            (?xi)
            (?={{rpl_end_of_condition_statement}})
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_prefix
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_parameter
        - include: rpl_set_name
        - match: ''
          pop: true

  rpl_condition_rib_has_route:
    - match: |
        (?xi)
        \s*(rib-has-route)\s+(in)\s+{{rpl_inline_condition_parentheses_comma_separated_lookahead}}
      captures:
        1: constant.character
        2: keyword.operator
      push:
        - match: |
            (?xi)
            (?={{rpl_end_of_condition_statement}})
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_prefix
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_parameter
        - include: rpl_set_name
        - match: ''
          pop: true

  rpl_condition_source_in:
    - match: |
        (?xi)
        \s*(source)\s+(in)\s+{{rpl_inline_condition_parentheses_comma_separated_lookahead}}
      captures:
        1: constant.character
        2: keyword.operator
      push:
        - match: |
            (?xi)
            (?={{rpl_end_of_condition_statement}})
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_prefix
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_parameter
        - include: rpl_set_name
        - match: ''
          pop: true

  rpl_condition_route_has_label:
    - match: |
        (?xi)
        \s*(route-has-label)
      captures:
        1: constant.character

  rpl_condition_orf_prefix_in:
    - match: |
        (?xi)
        \s*(orf\s+prefix)\s+(in)\s+{{rpl_inline_condition_parentheses_comma_separated_lookahead}}
      captures:
        1: constant.numeric
        2: keyword.operator
      push:
        - match: |
            (?xi)
            (?={{rpl_end_of_condition_statement}})
          pop: true
        - match: '(\()(?=[^\)]*(\)))'
          comment: Inline
          captures:
            1: comment
            2: comment
          push:
            - match: |
                (?xi)
                (?=\s*[^,\)]*\s*[,\)])
              comment: Statement ending in a comma or a close parenthesis
              set:
                - include: rpl_prefix
                - include: rpl_comma_seperator
                - match: '\s*\)\s*'
                  captures:
                    0: comment
                  pop: true
                - match: ''
                  comment: End inline statement list
                  pop: true
        - include: rpl_then_lookahead_pop
        - include: rpl_parameter
        - include: rpl_set_name
        - match: ''
          pop: true

  mpls_traffic_eng_path_selection_ignore_overload:
    - match: |
        (?xi)
        ^\s*
        (mpls\s+traffic-eng\s+path-selection\s+ignore\s+overload)
      captures:
        0: support.constant

  l2_vpn:
    - match: |
        (?xi)
        ^\s*
        (l2vpn)
        \s*$
      captures:
        0: cisco.scope.l2_vpn
        1: variable.parameter
      push:
        - meta_content_scope: text.network.cisco.l2_vpn
        - include: l2_vpn_bridge_group
        - match: '{{ctx_pop_configure_terminal}}'
          pop: true

  l2_vpn_bridge_group:
    - match: |
        (?xi)
        ^\s*
        (bridge\s+group)\s+(\S+)
        \s*$
      captures:
        0: cisco.scope.l2_vpn_bridge_group
        1: variable.parameter
        2: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.l2_vpn.bridge_group
        - include: l2_vpn_bridge_group_bridge_domain
        - match: '{{ctx_l2vpn}}'
          pop: true

  l2_vpn_bridge_group_bridge_domain:
    - match: |
        (?xi)
        ^\s*
        (bridge-domain)\s+(\S+)
        \s*$
      captures:
        0: cisco.scope.l2_vpn_bridge_group_bridge_domain
        1: variable.parameter
        2: string.unquoted
      push:
        - meta_content_scope: text.network.cisco.l2_vpn.bridge_group.bridge_domain
        - include: l2_vpn_bridge_group_bridge_domain_interface
        - match: '{{ctx_l2vpn_bridge_group}}'
          pop: true

  l2_vpn_bridge_group_bridge_domain_interface:
    - match: |
        (?xi)
        ^\s*
        (interface)\s+(?:({{interface_names}})\s*({{interface_numbers}}))
        \s*$
      captures:
        0: cisco.scope.l2_vpn_bridge_group_bridge_domain_interface
        1: variable.parameter
        2: entity.other.attribute-name     # interface Loopback
        3: constant.numeric                # interface Loopback 1

      push:
        - meta_content_scope: text.network.cisco.l2_vpn.bridge_group.bridge_domain.interface
        - match: |
            (?xi)
            ^\s*
            (evi)\s+({{number_range_1_65534}})
            \s*$
          captures:
            1: variable.parameter
            2: constant.numeric
        - match: '{{ctx_l2vpn_bridge_group_bridge_domain}}'
          pop: true


  interface:
    - match: |
        (?xi)
        ^\s*
        (?:
          (interface)\s+
          (?:
            (?:(tunnel)-(te)(\d+))|
            (?:(bvi)\s*({{number_16_bit_wo_zero}}))|
            (?:(range)\s+({{interface_names}})\s*({{interface_number_ranged}}))|
            (?:({{interface_names}})\s*({{interface_numbers}}))
          )
        )
      captures:
        0: cisco.scope.interface
        1: variable.parameter              # interface
        2: entity.other.attribute-name     # tunnel
        3: constant.numeric                # tunnel te
        4: constant.numeric                # tunnel te123
        5: entity.other.attribute-name     # bvi
        6: constant.numeric                # bvi 65535
        7: support.constant                # interface range
        8: entity.other.attribute-name     # interface range Loopback
        9: constant.numeric                # interface range Loopback 1-2
        10: entity.other.attribute-name     # interface Loopback
        11: constant.numeric                # interface Loopback 1
      push:
        - meta_content_scope: text.network.cisco.interface
        - include: interface_setting_base
        - include: interface_setting_isis
        - include: interface_setting_ip
        - include: interface_setting_te
        - include: interface_setting_l2
        - include: interface_address_family
        - match: '{{ctx_pop_configure_terminal}}'
          pop: true

  interface_access_group:
    - match: >
        (?xi)
        ^\s*(ipv[46])\s+(access-group)
        (?:\s+(common\s+(\S+)))?
        \s+(\S+)\s+
        (
          (?:ingress)|
          (?:egress)
        )
        (\s+hardware-count)?
        (\s+interface-statistics)?
        (?:\s+(compress\s+level)\s+([013]))?

      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: string.unquoted
        5: string.unquoted
        6: support.constant
        7: support.constant
        8: support.constant
        9: support.constant
        10: constant.numeric

  interface_setting_base:
    - include: interface_bandwidth
    - include: interface_mac_address
    - include: interface_local_proxy_arp
    - include: interface_host_routing
    - include: interface_arp_learning
    - include: interface_bundle
    - include: description
    - include: interface_mtu
    - include: interface_flow
    - include: interface_load_interval
    - include: interface_lldp
    - include: interface_access_group
    - match: |
        (?xi)
        ^\s*
        (?:
          (?:(no\s+shutdown))|
          (?:(shutdown))|
          (?:(cdp))
        )
      captures:
        1: support.constant                           # no shutdown
        2: keyword.other                              # shutdown
        3: support.constant                          # cdp

  interface_setting_isis:
    - include: interface_setting_isis_circuit_type
    - include: interface_setting_isis_csnp_interval

  interface_setting_isis_circuit_type:
    - match: |
        (?xi)
        ^\s*(circuit-type)\s+
        (
          (?:level-1(?:-2)?)|
          (?:level-2-only)
        )
        \s*$
      captures:
        1: support.constant
        2: constant.character

  interface_setting_isis_csnp_interval:
    - match: |
        (?xi)
        ^\s*(csnp-interval)\s+({{number_16_bit_wo_zero}})
        (?:
          \s+(level)\s+([12])
        )?
        \s*$
      captures:
        1: support.constant
        2: constant.numeric
        3: support.constant
        4: constant.numeric

  interface_setting_isis_mpls:
    - match: |
        (?xi)
        ^\s*(mpls)\s+(?=ldp\s+sync)
      captures:
        1: support.constant
      push:
        - match: |
            (?xi)
            (ldp)\s+(sync)
            (?:
              \s+(level)\s+([12])
            )?
            \s*$
          captures:
            1: support.constant
            2: support.constant
            3: support.constant
            4: constant.numeric
          pop: true


  interface_setting_ip:
    - include: interface_ipv4_address
    - include: interface_enable_ipv6
    - include: interface_ipv6_address
    - match: |
        (?xi)
        ^\s*
        (?:
          (?:(vrf)\s+({{vrf_name}}))|
          (?:(ipv4)\s+(unnumbered)\s+({{interface_names}})\s*({{interface_numbers}}))
        )
      captures:
        1: support.constant                           # vrf
        2: string.unquoted                            # vrf name
        3: support.constant                           # ipv4
        4: support.constant                           # ipv4 unumbered
        5: entity.other.attribute-name                # ipv4 unumbered Loopback
        6: constant.numeric                          # ipv4 unumbered Loopback 123

  interface_ipv4_address:
    - match: |
        (?xi)
        ^\s*
        (ipv4)\s+(address)\s+
        (?:
          (?:({{ip}})\s+({{subnet_mask}}))|
          ({{ip_prefix}})
        )
        (?:\s+(secondary))?
        (?:\s+(route-tag)\s+({{number_32_bit_wo_zero}}))?
        \s*$
      captures:
        1: support.constant                           # ipv4
        2: support.constant                           # ipv4 address
        3: constant.numeric.ip.ipv4.address           # ipv4 address ip
        4: constant.numeric.network.ipv4.subnet_mask  # ipv4 address ip subnet mask
        5: constant.numeric.ip.ipv4.prefix           # ipv4 address ip
        6: support.constant
        7: support.constant
        8: constant.numeric

  interface_enable_ipv6:
    - match: |
        (?xi)
        ^\s*
        (?:(enable)\s+(ipv6))
        \s*$
      captures:
        1: support.constant
        2: support.constant

  interface_ipv6_address:
    - match: |
        (?xi)
        ^\s*
        (?:(ipv6)\s+(address)\s+({{ipv6_prefix}}))
        (?:\s+(eui-64))?
        (?:\s+(route-tag)\s+({{number_32_bit_wo_zero}}))?
        \s*$
      captures:
        1: support.constant                           # ipv6
        2: support.constant                           # ipv6 address
        3: constant.numeric.ip.ipv6.prefix           # ipv6 address ip
        4: support.constant
        5: support.constant
        6: constant.numeric

  interface_setting_l2:
    - include: encapsulation_dot1q

  encapsulation_dot1q:
    - match: >
        (?xi)
        ^\s*
        (?:
          (?:(encapsulation)\s+(dot1q)\s+({{vlan_id}}))
        )
      captures:
        1: support.constant                           # encapsulation
        2: support.constant                           # encapsulation dot1q
        3: constant.numeric                           # encapsulation dot1q 123

  interface_address_family:
    - include: interface_ipv4_address_family
    - include: interface_ipv6_address_family

  interface_ipv4_address_family:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)
        (?:
          \s+
          (
            (?:unicast)|
            (?:multicast)
          )
        )?
        \s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.interface.address_family.ipv4
      - include: interface_address_family_setting
      - match: '{{ctx_pop_vrf}}'
        pop: true

  interface_ipv6_address_family:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:unicast)|
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.interface.address_family.ipv6
      - include: interface_address_family_setting
      - match: '{{ctx_pop_vrf}}'
        pop: true

  interface_address_family_setting:
    - include: interface_address_family_setting_isis

  interface_address_family_setting_isis:
    - include: interface_setting_isis_mpls
    - include: interface_setting_isis_fast_reroute_per_link
    - include: interface_setting_isis_fast_reroute_per_prefix
    - match: 'disable'
      captures:
        0: keyword

  interface_setting_isis_fast_reroute_per_link:
    - match: |
        (?xi)
        ^\s*(fast-reroute\s+per-link)\s+
      captures:
        1: support.constant
        2: constant.character
      push:
        - match: |
            (?xi)
            (level)\s+([12])\s*$
          captures:
            1: support.constant
            2: constant.numeric
          pop: true
        - match: |
            (?xi)
            (exclude)\s+(interface)\s+(?={{interface_names}})\s*({{interface_numbers}})
          captures:
            1: keyword
            2: support.constant
            3: entity.other.attribute-name
            4: constant.numeric
          push:
            - include: interface_instance_w_pop
        - match: |
            (?xi)
            (lfa-candidate\s+interface)\s+(?={{interface_names}})\s*({{interface_numbers}})
          captures:
            1: support.constant
            2: entity.other.attribute-name
            3: constant.numeric
          push:
            - include: interface_instance_w_pop
        - match: '\s*$'
          pop: true

  interface_setting_isis_fast_reroute_per_prefix:
    - match: |
        (?xi)
        ^\s*(fast-reroute\s+per-prefix)\s+
      captures:
        1: support.constant
        2: constant.character
      push:
        - match: |
            (?xi)
            (level)\s+([12])\s*$
          captures:
            1: support.constant
            2: constant.numeric
          pop: true
        - match: |
            (?xi)
            (exclude)\s+(interface)\s+(?={{interface_names}})\s*({{interface_numbers}})
          captures:
            1: keyword
            2: support.constant
            3: entity.other.attribute-name
            4: constant.numeric
          push:
            - include: interface_instance_w_pop
        - match: |
            (?xi)
            (lfa-candidate\s+interface)\s+(?={{interface_names}})\s*({{interface_numbers}})
          captures:
            1: support.constant
            2: entity.other.attribute-name
            3: constant.numeric
          push:
            - include: interface_instance_w_pop
        - match: |
            (?xi)
            (remote-lfa)\s+
            (?:
              (?:(maximum-metric)\s+({{number_24_bit}}))|
              (?:(tunnel)\s+(mpls-ldp))
            )
          captures:
            1: support.constant
            2: support.constant
            3: constant.numeric
            4: support.constant
            5: constant.character
        - match: '\s*$'
          pop: true

  interface_bandwidth:
    - match: |
        (?xi)
        ^\s*
        (bandwidth)\s+({{number_32_bit}})
        \s*$
      captures:
        1: support.constant
        2: constant.numeric

  interface_mac_address:
    - match: |
        (?xi)
        ^\s*
        (mac-address)\s+({{mac_address}})
        \s*$
      captures:
        1: support.constant
        2: constant.numeric

  interface_local_proxy_arp:
    - match: |
        (?xi)
        ^\s*
        (local-proxy-arp)
        \s*$
      captures:
        1: support.constant

  interface_arp_learning:
    - match: |
        (?xi)
        ^\s*
        (arp\s+learning)\s+(
          (?:local)|
          (?:disable)
        )
        \s*$
      captures:
        1: support.constant
        2: entity.other.attribute-name

  interface_host_routing:
    - match: |
        (?xi)
        ^\s*
        (host-routing)
        \s*$
      captures:
        1: support.constant

  interface_load_interval:
    - match: |
        (?xi)
        ^\s*
        (load-interval)
        \s+
        (
          (?:300)|
          (?:270)|
          (?:240)|
          (?:210)|
          (?:180)|
          (?:150)|
          (?:120)|
          (?:90)|
          (?:60)|
          (?:30)|
          (?:0)
        )
      captures:
        1: support.constant
        2: constant.numeric

  interface_flow:
    - match: |
        (?xi)
        ^\s*
        (flow)\s+
        (
          (?:ipv4)|
          (?:ipv6)|
          (?:mpls)
        )
        \s+
        (monitor)
        \s+
        (\S+)
        \s+
        (sampler)
        \s+
        (\S+)
        \s+
        (
          (?:egress)|
          (?:ingress)
        )
      captures:
        1: support.constant
        2: constant.language
        3: support.constant
        4: string.unquoted
        5: support.constant
        6: string.unquoted
        7: entity.other.attribute-name

  interface_bundle:
    - include: interface_bundle_id
    - include: interface_bundle_port_priority

  interface_bundle_id:
    - match: |
        (?xi)
        ^\s*
        (bundle)\s+(id)\s+({{number_16_bit_wo_zero}})
        (?:
          \s+
          (mode)\s+
            (
              (?:active)|
              (?:passive)|
              (?:on)
            )
        )?
      captures:
        1: support.constant
        2: support.constant
        3: constant.numeric
        4: support.constant
        5: entity.other.attribute-name

  interface_bundle_port_priority:
    - match: |
        (?xi)
        ^\s*
        (bundle)\s+(port-priority)\s+({{number_16_bit_wo_zero}})
      captures:
        1: support.constant
        2: support.constant
        3: constant.numeric

  interface_mtu:
    - match: |
        (?xi)
        ^\s*
        (mtu)\s+({{mtu}})
        \s*$
      captures:
        1: support.constant
        2: constant.numeric.mtu

  interface_lldp:
    - match: |
        (?xi)
        ^\s*(lldp)
      captures:
        0: cisco.scope
        1: variable.parameter
      push:
        - meta_content_scope: text.network.cisco.interface.lldp
        - include: interface_lldp_receive_transmit_disable
        - include: interface_lldp_destination_mac_address
        - match: '{{ctx_pop_interface}}'
          pop: true

  interface_lldp_receive_transmit_disable:
    - match: |
        (?xi)
        ^\s*
        (
          (?:receive)|
          (?:transmit)
        )
        \s+(disable)
      captures:
        1: support.constant
        2: keyword.other

  interface_lldp_destination_mac_address:
    - match: |
        (?xi)
        ^\s*(destination)\s+(mac-address)
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push:
        - meta_content_scope: text.network.cisco.interface.lldp.destination.mac-address
        - include: interface_lldp_destination_mac_address_iee_nearest_bridge
        - include: interface_lldp_destination_mac_address_ieee_nearest_non_tmpr_bridge
        - match: '{{ctx_pop_interface_lldp}}'
          pop: true

  interface_lldp_destination_mac_address_iee_nearest_bridge:
    - match: |
        (?xi)
        ^\s*(ieee-nearest-bridge)
      captures:
        1: support.constant

  interface_lldp_destination_mac_address_ieee_nearest_non_tmpr_bridge:
    - match: |
        (?xi)
        ^\s*(ieee-nearest-non-tmpr-bridge)
      captures:
        1: support.constant

  interface_setting_te:
    - match: |
        (?xi)
        ^\s*
        (?:
          (?:(signalled-bandwidth)\s+(\d+))|
          (?:(destination)\s+({{ip}}))|
          (?:
            (path-option)
            (\s+{{mpls_te_path_priority}})?
            (?:\s+(protecting)\s+({{mpls_te_path_id}}))?
            (?:
              \s+
              (?:
                (?:(dynamic))|
                (?:
                  (explicit)\s+
                  (?:
                    (?:(name)\s+(\S+))|
                    (?:(identifier)\s+(\d+))
                  )
                  (?:\s+(protected-by)\s+({{mpls_te_path_id}}))?
                )
              )
            )
            (?:\s+(attribute-set)\s+(\S+))?
            (?:\s+(isis)\s+(\S+)\s+(level)\s+([12]))?
            (?:\s+(lockdown))?
            (?:\s+(ospf)\s+(\S+)\s+(area)\s+({{ospf_area_id}}))?
            (?:\s+(verbatim))?
          )
        )
      captures:
        1: support.constant                          # signalled-bandwidth
        2: constant.numeric                          # signalled-bandwidth 123
        3: support.constant                          # destination
        4: constant.numeric.ip.ipv4.address          # destination 1.2.3.4
        5: support.constant                          # path-option
        6: constant.numeric                          # path-option 1000
        7: support.constant                          # path-option 1 protecting
        8: constant.numeric                          # path-option 1 protecting 1000
        9: support.constant                          # path-option 1 dynamic
        10: support.constant                          # path-option 1 explicit
        11: support.constant                          # path-option 1 explicit name
        12: string.unquoted                           # path-option 1 explicit name XYZ
        13: support.constant                          # path-option 1 explicit identifier
        14: constant.numeric                          # path-option 1 explicit identifier 123
        15: support.constant                          # path-option 1 explicit identifier 1 protected-by
        16: constant.numeric                          # path-option 1 explicit identifier 1 protected-by 123
        17: support.constant                          # path-option dynamic attribute-set
        18: string.unquoted                           # path-option dynamic attribute-set NAME
        19: support.constant                          # path-option dynamic isis
        20: string.unquoted                           # path-option dynamic isis NAME
        21: support.constant                          # path-option dynamic isis NAME level
        22: constant.numeric                          # path-option dynamic isis NAME level 1
        23: support.constant                          # path-option dynamic lockdown
        24: support.constant                          # path-option dynamic ospf
        25: string.unquoted                           # path-option dynamic ospf NAME
        26: support.constant                          # path-option dynamic ospf NAME area
        27: constant.numeric                          # path-option dynamic ospf NAME area 1
        28: support.constant                          # path-option dynamic lockdown

  description:
    - match: '^\s*(description.*)'
      captures:
        1: comment.line

  vrf:
    - match: '^\s*(vrf)\s+({{vrf_name}})'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.vrf
      - include: description
      - include: vrf_address_family
      - include: pop_on_configure_terminal_context

  router_ospf:
    - match: '^\s*(router)\s+(ospf)\s+({{ospf_identifier}})'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.router.ospf
      - include: router_ospf_settings
      - include: router_ospf_vrf
      - include: router_ospf_area
      - include: router_ospf_address_family
      - include: pop_on_configure_terminal_context

  router_ospf_settings:
    - include: router_id
    - include: router_ospf_settings_log_adjacency_changes
    - include: router_ospf_settings_timers_lsa_min_arrival
    - include: router_ospf_settings_timers_lsa_all
    - include: router_ospf_settings_timers_spf
    - include: router_ospf_settings_auto_cost
    - include: ospf_loopback_stub_network
    - include: ospf_authentication
    - include: ospf_message_digest_key

  router_ospf_settings_passive:
    - match: |
        (?xi)
        ^\s*
        (passive)\s+
        (?:
          (enable)|
          (disable)
        )
        \s*$
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: keyword

  router_ospf_settings_auto_cost:
    - match: |
        (?xi)
        ^\s*
        (auto-cost)\s+
        (?:
          (?:(reference-bandwidth)\s+({{number_range_1_4294967}}))|
          (disable)
        )
        \s*$
      captures:
        1: support.constant
        2: support.constant
        3: constant.numeric
        4: keyword

  router_ospf_settings_timers_lsa_all:
    - match: |
        (?xi)
        ^\s*
        (timers)\s+(throttle)\s+(lsa)\s+(all)
        \s+({{number_range_0_600000}})
        \s+({{number_range_1_600000}})
        \s+({{number_range_1_600000}})
        \s*$
      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: support.constant
        5: constant.numeric
        6: constant.numeric
        7: constant.numeric

  router_ospf_settings_timers_spf:
    - match: |
        (?xi)
        ^\s*
        (timers)\s+(throttle)\s+(spf)
        \s+({{number_range_1_600000}})
        \s+({{number_range_1_600000}})
        \s+({{number_range_1_600000}})
        \s*$
      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: support.constant
        5: constant.numeric
        6: constant.numeric
        7: constant.numeric

  router_ospf_settings_timers_lsa_min_arrival:
    - match: |
        (?xi)
        ^\s*
        (timers)\s+(lsa)\s+(min-arrival)
        \s+({{number_range_0_600000}})
        \s*$
      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: constant.numeric

  router_ospf_settings_log_adjacency_changes:
    - match: |
        (?xi)
        ^\s*
        (log-adjacency-changes)\s+
        (?:
          (detail)|
          (disable)
        )
        \s*$
      captures:
        1: support.constant                          # log-adjacency-changes
        2: support.constant
        3: keyword

  router_ospf_area:
    - match: '^\s*(area)\s+({{ospf_area_id}})'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.numeric
      push:
        - meta_content_scope: text.network.cisco.ospf.area
        - include: router_ospf_area_interface
        - include: router_ospf_area_settings
        - match: '{{ctx_pop_router_ospf}}'
          pop: true

  router_ospf_area_settings:
    - include: ospf_loopback_stub_network
    - include: ospf_authentication
    - include: ospf_message_digest_key

  router_ospf_area_interface:
    - match: |
        (?xi)
        ^\s*
        (?:
          (interface)\s+
          (?:
            (?:(tunnel)-(te)(\d+))|
            (?:({{interface_names}})\s*({{interface_numbers}}))
          )
        )
      captures:
        0: cisco.scope.ospf.area.interface
        1: variable.parameter              # interface
        2: entity.other.attribute-name     # tunnel
        3: constant.numeric                # tunnel te
        4: constant.numeric                # tunnel te123
        5: entity.other.attribute-name     # interface Loopback
        6: constant.numeric                # interface Loopback 1
      push:
        - meta_content_scope: text.network.cisco.ospf.area.interface
        - include: ospf_loopback_stub_network
        - include: router_ospf_settings_passive
        - include: ospf_authentication
        - include: ospf_message_digest_key
        - include: ospf_network
        - match: '{{ctx_pop_router_ospf_area}}'
          pop: true

  ospf_loopback_stub_network:
    - match: |
        (?xi)
        ^\s*(loopback)\s+(stub-network)\s+
        (?:
          (enable)|
          (disable)
        )
        \s*$
      captures:
        1: support.constant
        2: support.constant
        3: entity.other.attribute-name
        4: keyword

  ospf_authentication:
    - match: |
        (?xi)
        ^\s*(authentication)
        (?:
          \s+
          (?:
            (?:
              (message-digest)
              (?:\s+(keychain)\s+(\S+))?
            )|
            (null)
          )
        )?
        \s*$
      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: string.unquoted
        5: constant.character

  ospf_message_digest_key:
    - match: |
        (?xi)
        ^\s*(message-digest-key)
        \s+({{number_8_bit}})
        \s+(md5)\s+
        (?:
          ([a-f0-9]{1,16})|
          (?:(clear)\s+([a-f0-9]{1,16}))|
          (?:(encrypted)\s+([a-f0-9]+))
        )
        \s*$
      captures:
        1: support.constant
        2: constant.numeric
        3: support.constant
        4: string.unquoted
        5: support.constant
        6: string.unquoted
        7: support.constant
        8: string.unquoted

  ospf_network:
    - match: |
        (?xi)
        ^\s*(network)\s+
        (?:
          ((?:non-)?broadcast)|
          (?:(point-to-multipoint)(?:\s+(non-broadcast))?)|
          (point-to-point)|
        )
        \s*$
      captures:
        1: support.constant
        2: constant.language
        3: constant.language
        4: constant.language
        5: constant.language

  router_ospf_vrf:
    - match: '^\s*(vrf)\s+({{vrf_name}})'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.ospf.vrf
      - include: router_ospf_vrf_settings
      - match: '{{ctx_pop_router_ospf}}'
        pop: true

  router_ospf_vrf_settings:
    - include: router_id
    - include: router_ospf_vrf_domain_id
    - include: router_ospf_vrf_redistribute
    - include: ospf_authentication
    - include: ospf_message_digest_key

  router_ospf_vrf_domain_id:
    - match: |
        (?xi)
        ^\s*(domain-id)
        (?:\s+(secondary))?
        \s+(type)\s+
        (
          (?:0005)|
          (?:0105)|
          (?:0205)|
          (?:8005)
        )
        \s+(value)\s+([0-9a-f]{12})
        \s*$
      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: constant.numeric.ip.ipv4.address
        5: support.constant
        6: constant.numeric

  router_ospf_vrf_redistribute:
    - match: |
        (?xi)
        ^\s*(redistribute)\s+
      captures:
        1: support.constant
      push:
        - include: router_ospf_vrf_redistribute_bgp

  router_ospf_vrf_redistribute_bgp:
    - match: |
        (?xi)
        (bgp)\s+({{autonomous_system}})
        (\s+preserve-med)?
        (?:\s+(metric)\s+({{number_24_bit_1_to_16777214}}))?
        (?:\s+(metric-type)\s+([12]))?
        (?:\s+(route-policy)\s+(\S+))?
        (?:\s+(tag)\s+({{number_32_bit}}))?
      captures:
        1: constant.character
        2: constant.numeric.as
        3: support.constant
        4: support.constant
        5: constant.numeric
        6: support.constant
        7: constant.numeric
        8: support.constant
        9: string.unquoted
        10: support.constant
        11: constant.numeric
      pop: true

  router_ospf_address_family:
    - include: router_ospf_ipv4_address_family
    - include: router_ospf_ipv6_address_family

  router_ospf_ipv4_address_family:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+
        (
          (?:unicast)|
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.ospf.address_family.ipv4
      # - include: isis_address_family_settings
      # - include: isis_address_family_ipv4_settings
      - match: '{{ctx_pop_router_ospf}}'
        pop: true

  router_ospf_ipv6_address_family:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:unicast)|
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.ospf.address_family.ipv6
      # - include: isis_address_family_settings
      # - include: isis_address_family_ipv6_settings
      - match: '{{ctx_pop_router_ospf}}'
        pop: true

  line_default:
    - match: '^\s*(line)\s+(default)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push:
      - meta_content_scope: text.network.cisco.line.default
      - include: pop_on_configure_terminal_context

  line_console:
    - match: '^\s*(line)\s+(console)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push:
      - meta_content_scope: text.network.cisco.line.console
      - include: pop_on_configure_terminal_context

  router_isis:
    - match: '^\s*(router)\s+(isis)\s+({{isis_identifier}})'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.router.isis
      - include: router_isis_network_entity_title
      - include: router_isis_settings
      - include: router_isis_address_family
      - include: pop_on_configure_terminal_context

  router_isis_network_entity_title:
      - match: |
          (?xi)
          ^\s*(net)\s+({{isis_network_entity_title}})\s*$
        captures:
          1: support.constant
          2: constant.numeric.net

  router_isis_address_family:
    - include: router_isis_ipv4_address_family_multicast_topology
    - include: router_isis_ipv4_address_family
    - include: router_isis_ipv6_address_family

  router_isis_ipv4_address_family:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+
        (
          (?:unicast)|
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.isis.address_family.ipv4
      - include: isis_address_family_settings
      - include: isis_address_family_ipv4_settings
      - match: '{{ctx_pop_router_isis}}'
        pop: true

  router_isis_ipv6_address_family:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:unicast)|
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.isis.address_family.ipv6
      - include: isis_address_family_settings
      - include: isis_address_family_ipv6_settings
      - match: '{{ctx_pop_router_isis}}'
        pop: true

  isis_address_family_ipv4_settings:
    - include: router_isis_ipv4_distance
    - include: router_isis_ipv4_mpls

  isis_address_family_ipv6_settings:
    - include: isis_ipv6_distance

  isis_address_family_settings:
    - include: isis_adjacency_check_disable
    - include: isis_attached_bit_reveive_ignore
    - include: isis_attached_bit_send
    - include: isis_default_information_originate
    - include: isis_metric_style
    - include: router_isis_mpls

  isis_metric_style:
    - match: |
        (?xi)
        ^\s*(metric-style)\s+
      captures:
        1: support.constant
      push:
        - match: |
            (?xi)
            ((?:narrow)|(?:wide))(?:\s+(transition))?(?:\s+(level)\s+([12]))?
          captures:
            1: support.constant
            2: support.constant
            3: support.constant
            4: constant.numeric
          pop: true
        - match: |
            (?xi)
            (transition)(?:\s+(level)\s+([12]))?
          captures:
            1: support.constant
            2: support.constant
            3: constant.numeric
          pop: true
        - match: '\s*$'
          pop: true

  router_isis_mpls:
    - match: |
        (?xi)
        ^\s*(mpls)\s+(ldp)\s+(auto-config)\s*$
      captures:
        1: support.constant
        2: support.constant
        3: support.constant

  router_isis_ipv4_mpls:
    - match: |
        (?xi)
        ^\s*(mpls)\s+
      captures:
        1: support.constant
      push:
        - match: |
            (?xi)
            (traffic-eng)\s+(router-id)\s+({{ip}})\s*$
          captures:
            1: support.constant
            2: support.constant
            3: constant.numeric.ip.ipv4.address
          pop: true
        - match: |
            (?xi)
            (traffic-eng)\s+(router-id)\s+
          captures:
            1: support.constant
            2: support.constant
          push: interface_instance_w_pop
        - match: |
            (?xi)
            (traffic-eng)\s+
            (
              (?:level-1-2)|
              (?:level-1)|
              (?:level-2-only)
            )
            \s*$
          captures:
            1: support.constant
            2: constant.character
          pop: true
        - match: |
            (?xi)
            (traffic-eng)\s+(multicast-intact)
            \s*$
          captures:
            1: support.constant
            2: support.constant
        - match: |
            (?xi)
            (traffic-eng)\s+(multicast-intact)
            \s*$
          captures:
            1: support.constant
            2: support.constant
          pop: true
        - match: '\s*$'
          pop: true

  router_isis_ipv4_distance:
    - match: |
        (?xi)
        ^\s*(distance)\s+({{number_8_bit}})
        (?:
          \s+
          (?:
            ({{ip_prefix}})|
            (?:({{ip}})\s+({{subnet_mask}}))
          )
          (?:\s+(\S+))?
        )?
        \s*$
      captures:
        1: support.constant
        2: constant.numeric
        3: constant.numeric.ip.ipv4.prefix
        4: constant.numeric.ip.ipv4.address
        5: constant.numeric.network.ipv4.subnet_mask
        6: string.unquoted

  isis_ipv6_distance:
    - match: |
        (?xi)
        ^\s*(distance)\s+({{number_8_bit}})
        (?:
          \s+({{ipv6_prefix}})
          (?:\s+(\S+))?
        )?
        \s*$
      captures:
        1: support.constant
        2: constant.numeric
        3: constant.numeric.ip.ipv6.prefix
        4: string.unquoted

  isis_default_information_originate:
    - match: |
        (?xi)
        ^\s*(default-information)\s+(originate)
        (?:
          \s+
          (route-policy)\s+(\S+)
        )?
        \s*$
      captures:
        1: support.constant
        2: support.constant
        3: support.constant
        4: string.unquoted

  isis_adjacency_check_disable:
    - match: |
        (?xi)
        ^\s*(adjacency-check)\s+(disable)
      captures:
        1: support.constant
        2: keyword

  isis_attached_bit_reveive_ignore:
    - match: |
        (?xi)
        ^\s*(attached-bit\s+receive\s+ignore)\s*$
      captures:
        1: support.constant

  isis_attached_bit_send:
    - match: |
        (?xi)
        ^\s*(attached-bit\s+send)\s+
        (?:
          (always-set)|
          (never-set)
        )
        \s*$
      captures:
        1: support.constant
        2: entity.other.attribute-name
        3: keyword

  router_isis_settings:
    - include: router_isis_adjacency_stagger
    - include: router_isis_nsf
    - include: router_isis_nsf_interface_expires
    - include: router_isis_nsf_interface_timer

  router_isis_adjacency_stagger:
    - match: |
        (?xi)
        ^\s*(adjacency\s+stagger)\s+
        (?:
          (disable)|
          ({{number_16_bit_wo_zero}}\s+{{number_16_bit_wo_zero}})
        )
      captures:
        1: support.constant
        2: keyword
        3: constant.numeric

  router_isis_nsf:
    - match: |
        (?xi)
        ^\s*(nsf)\s+
        (
          (?:cisco)|
          (?:ietf)
        )
      captures:
        1: support.constant
        2: constant.character

  router_isis_nsf_interface_expires:
    - match: |
        (?xi)
        ^\s*(nsf\s+interface-expires)\s+([1-3])
      captures:
        1: support.constant
        2: constant.numeric

  router_isis_nsf_interface_timer:
    - match: |
        (?xi)
        ^\s*(nsf\s+interface-timer)\s+
        \b
        (
          (?:20)|
          (?:1\d)|
          (?:[3-9])
        )
        \b
        \s*$
      captures:
        1: support.constant
        2: constant.numeric

  router_isis_ipv4_address_family_multicast_topology:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+(multicast\s+topology)
        \s+
        (\S+)
        (?:
          \s+(maximum\s+prefix)\s+
          (
            (?:2000000)|
            (?:1\d{6})|
            (?:\d{3,6})|
            (?:[4-9]\d)|
            (?:3[2-9])
          )
        )?
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
        4: string.unquoted
        5: support.constant
        6: constant.numeric
      push:
      - meta_content_scope: text.network.cisco.isis.address_family.ipv4
      - include: ipv4_route
      - match: '{{ctx_pop_vrf}}'
        pop: true

  exec_isis:
    - include: exec_isis_clear

  exec_isis_clear:
    - match: |
        (?xi)
        ^\s*(clear)\s+(isis)
        (?:\s+(instance)\s+({{isis_identifier}}))?\s+
        (?=
          .*
          (?:
            (?:
              (?:route)|
              (?:process)|
              (?:statistics\s+.*)
            )
            \s*
            $
          )
        )
      captures:
        1: keyword
        2: support.constant
        3: support.constant
        4: string.unquoted
      push:
        - match: 'process'
          captures:
            0: support.constant
        - match: |
            (?xi)
            (statistics)
          captures:
            1: support.constant
        - match: |
            (?xi)
            (
              (?:afi-all)|
              (?:ipv4)|
              (?:ipv6)
            )
            \s+
            (
              (?:unicast)|
              (?:multicast)|
              (?:safi-all)
            )
            (?:
              \s+(topology)\s+(\S+)
            )?
            \s+(route)\s*$
          captures:
            1: constant.numeric
            2: constant.character
            3: support.constant
            4: string.unquoted
            5: support.constant
        - match: ''
          pop: true

  router_static:
    - match: '^\s*(router)\s+(static)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push:
      - meta_content_scope: text.network.cisco.router.static
      - include: static_address_family
      - include: pop_on_configure_terminal_context

  static_address_family:
    - include: static_ipv4_address_family
    - include: static_ipv6_address_family

  static_ipv4_address_family:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+
        (
          (?:unicast)|
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.address_family.static.ipv4
      - include: ipv4_route
      - match: '{{ctx_pop_router_static}}'
        pop: true

  static_ipv6_address_family:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv6)\s+
        (
          (?:unicast)|
          (?:multicast)
        )\s*$
      captures:
        0: cisco.scope
        1: variable.parameter
        2: constant.character
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.address_family.static.ipv6
      - include: ipv6_route
      - match: '{{ctx_pop_router_static}}'
        pop: true

  vrf_address_family:
    - include: vrf_ipv4_address_family

  vrf_ipv4_address_family:
    - match: |
        (?xi)
        ^\s*(address-family)\s+(ipv4)\s+
        (
          (?:unicast)|
          (?:multicast)
        )
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: support.constant
      push:
      - meta_content_scope: text.network.cisco.vrf.address_family.ipv4
      - match: '{{ctx_pop_vrf}}'
        pop: true
      - include: vrf_import_route_target
      - include: vrf_import_route_policy
      - include: vrf_export_route_target
      - include: vrf_export_route_policy

  interface_instance_w_pop:
    - match: |
        (?xi)
        \b
        ({{interface_names}})\s*({{interface_numbers}})
      captures:
        1: entity.other.attribute-name
        2: constant.numeric
      pop: true

  ipv4_route:
    - match: '^\s*({{ip_prefix}})\s+'
      captures:
        1: constant.numeric.ip.ipv4.prefix
      push:
        - match: '({{ip}})\s*$'
          captures:
            1: constant.numeric.ip.ipv4.address
          pop: true
        - include: interface_instance_w_pop

  ipv6_route:
    - match: '^\s*({{ipv6_prefix}})\s+'
      captures:
        1: constant.numeric.ip.ipv6.prefix
      push:
        - match: '({{ipv6}})\s*$'
          captures:
            1: constant.numeric.ip.ipv6.address
          pop: true
        - include: interface_instance_w_pop

  vrf_import_route_target:
    - match: '^\s*(import)\s+(route-target)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push:
      - meta_content_scope: text.network.cisco.vrf.import.route_target
      - match: '{{ctx_pop_vrf_address_family}}'
        pop: true
      - match: >
          (?xi)
          \s*
          (?:({{route_target}}))
        captures:
          1: constant.numeric        # route target

  vrf_export_route_target:
    - match: '^\s*(export)\s+(route-target)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
      push:
      - meta_content_scope: text.network.cisco.vrf.export.route_target
      - match: '{{ctx_pop_vrf_address_family}}'
        pop: true
      - match: >
          (?xi)
          \s*
          (?:({{route_target}}))
        captures:
          1: constant.numeric        # route target

  vrf_import_route_policy:
    - match: '^\s*(import)\s+(route-policy)\s+(\S+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.vrf.import.route_policy
      - match: '{{ctx_pop_vrf_address_family}}'
        pop: true

  vrf_export_route_policy:
    - match: '^\s*(export)\s+(route-policy)\s+(\S+)'
      captures:
        0: cisco.scope
        1: variable.parameter
        2: support.constant
        3: string.unquoted
      push:
      - meta_content_scope: text.network.cisco.vrf.export.route_policy
      - match: '{{ctx_pop_vrf_address_family}}'
        pop: true
      # - match: >
      #     (?xi)
      #     \s*
      #     (?:({{route_target}}))
      #   captures:
      #     1: constant.numeric        # route target

  logout:
    - match: '^\s*(logout)\s*'
      captures:
        1: support.constant

  pipe:
    - match: (?<=\s)(\|)
      scope: text.network.cisco.pipe
      captures:
        1: keyword.other
      push:
        - meta_content_scope: text.network.cisco.pipe
        - match: '(?=(?:{{comment}})|$)'
          pop: true
        - match: >
            (?xi)
            \s+
            (?:
              (include)|
              (exclude)
            )
            \s+
            ([^{{comment}}]*)
          captures:
            1: entity.other.attribute-name
            2: keyword.other
            3: string.unquoted

  router_id:
    - match: |
        (?xi)
        ^\s*(router-id)\s+({{ip}})\s*$
      captures:
        1: support.constant
        2: constant.numeric.ip.ipv4.address

